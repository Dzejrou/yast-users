/**
 * Module:		UserDefs.ycp
 *
 * Authors:		Johannes Buchhold <jbuch@suse.de>
 *
 * Purpose:		Handle user defaults and system settings
 *                      contains only constant settings
 *
 *
 * $Id$
 */
{

    module "UserDefs";
    textdomain "users";

    import "Console";
    import "UserAddDefs";
    import "Installation";

    // ===== global values=============================================
    global string valid_logname_chars  = "0123456789abcdefghijklmnopqrstuvwxyz-_";
    global string valid_password_chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#* ,.;:._-+!$%&/|\?{[()]}=";
    global string valid_home_chars     = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/_-";
    global string valid_group_chars    = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    global string valid_grouplist_chars= "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,-_";
    global string valid_id_chars       = "0123456789";

    global integer max_uid	  = 60000;
    global integer max_gid	  = 60000;
    global integer max_system_uid = 500;
    global integer max_system_gid = 100;
    global integer max_length_uid = max_uid;
    global integer max_length_gid = max_gid;
    global integer max_length_pas = 8;
    global integer min_length_pas = 5;


    global integer pass_max_days = 99999; //Maximum number of days a password may be used.
    global integer pass_min_days = 0;     //Minimum number of days allowed between password changes.
    global integer pass_warn_age = 7;	  //Number of days warning given before a password expires.

    global string default_pw     = "******";
    global string encoding       = "";

//    global boolean pam           = false;
    global symbol encryption	 = `des;




    /**
     * Return a map with the defaults for the shadow entry
     * @return map of shadow settings
     */
    global define map GetDefaultShadow()``{

	return	$[ //"expire"	: "",
		   "inact"	: UserAddDefs::pass_inact_days,
		   //"lstchg"	: "11747",
		   "max"	: pass_max_days,
		   "min"	: pass_min_days,
		   "warn"	: pass_warn_age	];

	/*
	  TODO fix expire and lstchg
	*/
    }

    /**
     * Read the security settings from the system.
     * @return boolean true on success
     */
    global define boolean Read()``{
	/* pam stuff */
	map pam_unix_map = $[];
	list pam_list = SCR::Read(.pam.all.password.pam_unix2);
	if(pam_list != [] && pam_list != nil)
	    pam_unix_map = select(pam_list,0,$[]);

	map pam_check_map = $[];
	pam_list = SCR::Read(.pam.all.password.pam_pwcheck);
	if(pam_list != [] && pam_list != nil)
	    pam_check_map = select(pam_list,0,$[]);

	/* md5 support */
	boolean md5 = contains(splitstring(lookup(pam_unix_map , "arguments", ""), " "), "md5");
	boolean blowfish = contains(splitstring(lookup(pam_unix_map , "arguments", ""), " "), "blowfish");

	/* set defaults */
	max_uid             = SCR::Read (.etc.login_defs.UID_MAX);
	if (nil == max_uid)
	    max_uid = 60000;
        max_gid             = SCR::Read (.etc.login_defs.GID_MAX);
        if (nil == max_gid)
            max_gid = 60000;
	max_system_uid             = SCR::Read (.etc.login_defs.UID_MIN) - 1;
        if (nil == max_system_uid)
            max_uid = 499;
        max_system_gid             = SCR::Read (.etc.login_defs.GID_MIN) - 1;
        if (nil == max_system_uid)
            max_system_uid = 99;
	max_length_uid      = size(sformat("%1", max_uid));
	max_length_gid      = size(sformat("%1", max_gid));
        max_length_pas      = SCR::Read (.etc.login_defs.PASS_MAX_LEN);
        if (nil ==  max_length_pas)
             max_length_pas = 8;
        min_length_pas      = SCR::Read (.etc.login_defs.PASS_MIN_LEN);
        if (nil ==  min_length_pas)
             min_length_pas = 5;
        pass_max_days      = SCR::Read (.etc.login_defs.PASS_MAX_DAYS);
        if (nil ==  pass_max_days)
             pass_max_days = 99999;
        pass_min_days      = SCR::Read (.etc.login_defs.PASS_MIN_DAYS);
        if (nil ==   pass_min_days)
              pass_min_days = 0;
        pass_warn_age      = SCR::Read (.etc.login_defs.PASS_WARN_AGE);
        if (nil ==  pass_warn_age)
             pass_warn_age = 7;

	encryption		= md5 ? `md5 : blowfish ? `blowfish : `des;

	/* set encoding */
	string language = UI::GetLanguage(true);
	encoding = Console::encoding;

	/* set maximal password length */
	if (`des != encryption)
	    max_length_pas = 128;

	return true;
    }
}
