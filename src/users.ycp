/**
 * File:
 *  users.ycp
 *
 * Module:
 *  Configuration of the users and groups
 *
 * Summary:
 *  Main file of users.
 *
 * Authors:
 *  Jan Holesovsky <kendy@suse.cz>, 2001
 *  Johannes Buchhold <jbuch@suse.de> 	
 *
 * $Id$
 *
 * Main file of yast2-config-users package. Calls all other modules.
 */

{
    /***
     * <H3>YaST2 Configuration of the users and groups</H3>
     */

    textdomain "users";

    // ===== arguments ================================================

    boolean test_mode = false;

    string  start_dialog = "users";
    if (size (Args ()) > 0 && Args (0) == .test)
    {
	test_mode = true;
    }
    else
    {
	if( size (Args ()) > 0 )
	{
	    start_dialog =  Args(0);
	}
    }
    
    // ===== Definitions ==============================================
    
    // The most important variable
    map user_settings = $[];

    // For cloning and so
    map  current_users   = $[];
    map  current_groups  = $[];
    list current_gshadow = [];

    map group_in_work = $[];
    map user_in_work  = $[];

    // ===== global values=============================================
    string valid_logname_chars  = "0123456789abcdefghijklmnopqrstuvwxyz";
    string valid_password_chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#* ,.;:._-+!$%&/|\?{[()]}";
    string valid_home_chars     = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/";
    string valid_group_chars    = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    string valid_grouplist_chars= "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,";
    string valid_id_chars       = "0123456789";
    
   

    
    include "security/io.ycp";              
    map security  		= SecurityRead();
    integer max_uid             = tointeger(lookup( security, "UID_MAX" , 60000));
    integer max_gid             = tointeger(lookup( security, "GID_MAX" , 60000));
    integer max_system_uid      = tointeger(lookup( security, "UID_MIN" , 500)); 
    integer max_system_gid      = tointeger(lookup( security, "GID_MIN" , 100));
    integer max_length_uid      = size(sformat("%1", max_uid));
    integer max_length_gid      = size(sformat("%1", max_gid));
    integer max_length_pas 	= tointeger(lookup( security,"PASS_MAX_LEN",8));
    integer min_length_pas 	= tointeger(lookup( security,"PASS_MIN_LEN",5));
    
    
    if( test_mode )    SCR::Write(.dumpto.tmp.security, security  );
    
    max_system_gid = max_system_gid - 1;
    max_system_uid = max_system_uid - 1;
    string default_pw           = "******";
    integer focusline_group = 0;
    integer focusline_user  = 0;
    boolean view_all_users  = false;
    boolean view_all_groups = false;

    
    // ===== includes =================================================
    include "ui/wizard_dialog.ycp";
    include "wizard/sequencer.ycp";
    include "font_defines.ycp";
    
    include "users/ui.ycp";
    include "users/io.ycp";

   
    map    settings = $[];
    string language = UI::GetLanguage(true);
    settings        = SelectConsoleFont( language);
    string encoding = lookup ( settings, "console_encoding", "ISO-8859-1");
  
    
    usersGroupsShadowReadFromDisk();
    usersUsersReadFromDisk();
    usersGroupsReadFromDisk();

  
    list pam_list = SCR::Read(.pam.passwd.password.pam_unix);
    map  pam_map  = select( pam_list, 0, $[]);
    boolean pam   = contains( splitstring( lookup( pam_map , "arguments", ""), " "), "md5");

    map useradd_defaults  = SCR::Read(.etc.default.useradd);
    y2milestone(" uasd %1",useradd_defaults);


    y2milestone(" getGroup : %1", getDefaultGid());
    y2milestone(" getDefaultHome ; %1", getDefaultHome());
    y2milestone(" getDefaultShell : %1", getDefaultShell());
    
    // test pam -md5
    if( test_mode ) {
	y2milestone(" orgi pam : %1 ", pam );
	//pam = true;
	y2milestone(" cryptmd5 : %1 ", cryptmd5( "askldjfhakjsh"));
	y2milestone(" crypt    : %1 ",  crypt( "askldjfhakjsh"));
	SCR(`Write(.dumpto.tmp.pam, pam_list ));
    }

    if( pam )
    {
	max_length_pas = 128;
	min_length_pas = 8;
    }
    
 
    // ===== Open UI ==================================================
    UI::CreateWizardDialog();
    
    // ===== Data for the WizardSequencer =============================
    map aliases = $[
	"users":         ``(usersUsersDialog()),
        "user_add":      ``(usersEditUser(`add_user)),
        "user_clone":    ``(usersEditUser(`clone_user)),
        "user_edit":     ``(usersEditUser(`edit_user)),
	"user_details":  ``(usersEditUserDetails()),
        "user_delete":   ``(usersDeleteUser()),
	"user_save":     ``(usersUserSaveToMap()),
	
	"groups":        ``(usersGroupsDialog()),
        "group_add":     ``(usersEditGroup(`add_group)),
        "group_clone":   ``(usersEditGroup(`clone_group)),
        "group_edit":    ``(usersEditGroup(`edit_group)),
	//"group_details": ``(usersEditGroupDetails()),
        "group_delete":  ``(usersDeleteGroup()),
	"group_save"  :  ``(usersGroupSaveToMap()),

	"without_save" :  ``(usersReallyAbort()),
	"save_to_system": ``(usersSaveDialog())

    ];

    map main_sequence = $[
        "ws_start":      start_dialog,
        "users":         $[ `switch_groups:  "groups",
			    `switch_users:   "users",
			    `new:            "user_add",
		            `clone:          "user_clone",
		            `edit:           "user_edit",
		            `delete:         "user_delete",
		            `next:           "save_to_system",
		            `abort:          "without_save",
			    `cancel:         "without_save",
			    `exit:           `abort ],
	"user_add":      $[ `next:           "user_save",
	      		    `details:        "user_details",
	                    `abort:          "without_save",
			    `cancel:         "without_save",
			    `back:           "users" ],
	"user_clone":    $[ `next:           "user_save",
			    `details:        "user_details",
			    `cancel:         "without_save",
	                    `abort:          "without_save" ],
	"user_details":  $[ `abort:          "without_save",
			    `add_user:       "user_add",
			    `cancel:         "without_save",
			    `clone_user:     "user_clone",
  			    `edit_user:      "user_edit"],
	"user_edit":     $[ `next:           "user_save",
			    `details:        "user_details",
			    `cancel:         "without_save",
	                    `abort:          "without_save" ],
	"user_delete":   $[ `next:           "users",
	                    `abort:          `abort ],
	"user_save":     $[ `next:	     "users",
			    `save:           "save_to_system"],
        "groups":        $[ `switch_users:   "users",
			    `switch_groups:  "groups",
	                    `new:            "group_add",
		            `clone:          "group_clone",
			    `edit:           "group_edit",
		            `delete:         "group_delete",
		            `next:           "save_to_system",
		            `abort:          "without_save",
			    `cancel:         "without_save",
			    `exit:           `abort ],
	"group_add":     $[ `next:           "group_save",
			  //`details:        "group_details",
	                    `abort:          "without_save",
			    `cancel:         "without_save",
			    `back:           "groups" ],
	"group_clone":   $[ `next:           "group_save",
			  //`details:        "group_details",
			    `cancel:         "without_save",
	                    `abort:          "group_save" ],
	"group_edit":    $[ `next:           "group_save",
			  //`details:        "group_details",
			    `cancel:         "without_save",
	                    `abort:          "without_save" ],
	//"group_details": $[ `abort:          "without_save" ],
	"group_delete":  $[ `next:           "groups",
			    `abort:          "without_save" ],
	"group_save"  :  $[ `next:           "groups",
			    `save:           "save_to_system" ],
	"without_save":  $[ `next :          `abort,
			    `back :          `back   ],
	"save_to_system": $[ `next: 	     `abort ]
	
    ];

   
    

    // ===== Read the current /etc/passwd and /etc/group ==============
	
    // ===== Start the sequence =======================================
    
    WizardSequencer(aliases, main_sequence);

    return UI::CloseDialog();
    // ===== Write ====================================================
   
} // End
