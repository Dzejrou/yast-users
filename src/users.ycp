/**
 * File:
 *  users.ycp
 *
 * Module:
 *  Configuration of the users and groups
 *
 * Summary:
 *  Main file of users.
 *
 * Authors:
 *  Jan Holesovsky <kendy@suse.cz>, 2001
 *
 * $Id$
 *
 * Main file of yast2-config-users package. Calls all other modules.
 */

{
    /***
     * <H3>YaST2 Configuration of the users and groups</H3>
     */

    textdomain "users";

    // ===== arguments ================================================

    boolean test_mode = false;
    if (size (Args ()) > 0 && Args (0) == .test)
    {
        test_mode = true;
    }
  
    // ===== includes =================================================
    include "ui/wizard_dialog.ycp";
    include "wizard/sequencer.ycp";
    
    include "users/ui.ycp";
    include "users/io.ycp";
    include "users/functions.ycp";

    // ===== Open UI ==================================================
    UI(`CreateWizardDialog());
    
    // ===== Data for the WizardSequencer =============================
    map aliases = $[
	"users":         ``(usersUsersDialog()),
        "user_new":      [ ``(usersClearCurrentUser()), true ],
        "user_add":      ``(usersEditUserDialog(`add_user)),
	"user_add_det":  ``(usersEditUserDetailsDialog()),
        "user_edit":     ``(usersEditUserDialog(`edit_user)),
	"user_edit_det": ``(usersEditUserDetailsDialog()),
        "user_delete":   ``(usersDeleteUser()),
	
	"groups":        ``(usersGroupsDialog()),
        "group_new":     [ ``(usersClearCurrentGroup()), true ],
        "group_add":     ``(usersEditGroupDialog(`add_group)),
	"group_add_det": ``(usersEditGroupDetailsDialog()),
        "group_edit":    ``(usersEditGroupDialog(`edit_group)),
	"group_details": ``(usersEditGroupDetailsDialog()),
        "group_delete":  ``(usersDeleteGroup())
    ];

    map main_sequence = $[
        "ws_start":      "users",
        "users":         $[ `switch_groups:  "groups",
	                    `new:            "user_new",
		            `clone:          "user_add",
		            `edit:           "user_edit",
		            `delete:         "user_delete",
		            `next:           `finish,
		            `abort:          `abort ],
	"user_new":      $[ `next:           "user_add" ],
	"user_add":      $[ `next:           "users",
	                    `details:        "user_add_det",
	                    `abort:          `abort ],
	"user_add_det":  $[ `next:           "user_add",
	                    `abort:          `abort ],
	"user_edit":     $[ `next:           "users",
	                    `details:        "user_edit_det",
	                    `abort:          `abort ],
	"user_edit_det": $[ `next:           "user_edit",
	                    `abort:          `abort ],
	"user_delete":   $[ `next:           "users",
	                    `abort:          `abort ],
        "groups":        $[ `switch_users:   "users",
	                    `new:            "group_new",
		            `clone:          "group_add",
		            `edit:           "group_edit",
		            `delete:         "group_delete",
		            `next:           `finish,
		            `abort:          `abort ],
	"group_new":     $[ `next:           "group_add" ],
	"group_add":     $[ `next:           "groups",
	                    `details:        "group_add_det",
	                    `abort:          `abort ],
	"group_add_det":$[  `next:           "group_add",
	                    `abort:          `abort ],
	"group_edit":    $[ `next:           "groups",
	                    `details:        "group_edit_det",
	                    `abort:          `abort ],
	"group_edit_det":$[ `next:           "group_edit",
	                    `abort:          `abort ],
	"group_delete":  $[ `next:           "groups",
	                    `abort:          `abort ]
    ];

    // ===== Definitions ==============================================
    
    // The most important variable
    /**
     * The user_settings map has these keys:
     * "users"   : list of all the users (/etc/passwd)
     * "groups"  : list of all the groups (/etc/group)
     * "uid_min" : integer (/etc/login.defs)
     * "uid_max" : integer (/etc/login.defs)
     * "gid_min" : integer (/etc/login.defs)
     * "gid_max" : integer (/etc/login.defs)
     */
    map user_settings = (test_mode)? usersGetTestUserSettings():
                                     usersRead();

    // For cloning and so
    map current_user  = $[];
    map current_group = $[];

    // ===== Read the current /etc/passwd and /etc/group ==============
	
    // ===== Start the sequence =======================================
    
    WizardSequencer(aliases, main_sequence);

    // ===== Write ====================================================
    if (!test_mode)
    {
	usersWrite(user_settings);
    }

} // End
