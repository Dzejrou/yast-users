/**
 * File:
 *  users/ui.ycp
 *
 * Module:
 *  Configuration of the users and groups
 *
 * Summary:
 *  Screens and UI routines for the users module
 *
 * Authors:
 *  Jan Holesovsky <kendy@suse.cz>, 2001
 *  Johannes Buchhold <jbuch@suse.de>
 *
 * $Id$
 *
 */

{
    textdomain "users";

    // ===== includes =================================================
    include "ui/wizard_dialog.ycp";
    include "ui/common_messages.ycp";
    include "ui/common_popups.ycp";
    include "users/io.ycp";
    include "users/help.ycp";

    
    /**
     * Define the switch between Users and Groups administration.
     * This is used in usersUsersDialog and usersGroupsDialog.
     * @param what what can be `users or `groups
     * @return symbol
     */
    global define rbUsersGroup(symbol what) ``{
	return 
	    `Left(`RadioButtonGroup(`HBox
	    (
	        `RadioButton(`id(`switch_users), `opt(`notify),
			     _("Users administration"), what == `users),
		`RadioButton(`id(`switch_groups), `opt(`notify),
			     _("Groups administration"), what == `groups)
	    )));
    }

  
    
    /**
     * The dialog that appears when the [Abort] button is pressed.
     * @return boolean true if user really wants to abort
     */
    global define usersReallyAbort() ``{
	if (size( user_settings ) == 0 )
	{ 
	    return `next;
	}
        boolean ret = UI(`AnyQuestionPopup
	       (
	           // message box label
		   _("Exit without saving"),
		   // message box text
		   _("All your changes in the setup procedure\nwill be lost if you continue."),
		   // push button 
		   _("&Exit without saving"),
		   // push button 
		   _("&Cancel abort"),
		   `focus_yes
               ));

	if( ret ) return `next;
	else return `back;
    }


    
    /**
     * The first of the two main dialogs -- list of the users.
     * @return symbol
     */
    global define usersUsersDialog() ``{

	user_in_work = $[];

	term contents = 
	    `VBox(rbUsersGroup(`users),

		  `Table(`id(`user_table), `opt(`notify), `header( _("Login"), _("Name"), _("UID"), _("Groups")), usersUsersRead(`items)),
	          `HBox
		  (
		      `PushButton(`id(`new),       _("&Add")),
		      //  `PushButton(`id(`clone),     _("&Clone")),
		      `PushButton(`id(`edit),      _("&Edit")),
		      `HStretch(),
		      `PushButton(`id(`delete),    _("&Delete"))
		  )
	    );

	UI(`SetWizardContentsButtons(_("User and group administration"),
		                     contents,
				     usersUsersDialogHelp(),
			             UI::CancelButtonLabel(),
				     UI::FinishButtonLabel()));


	if( focusline_user != 0) 
	    UI::ChangeWidget(`id(`user_table), `CurrentItem, focusline_user );	
			 
	symbol ret = `next;
	repeat
	    {
		ret = UI(`UserInput());

		// double click
		if( ret == `user_table )
		    ret = `edit;
		
		if ( ret == `edit  || ret == `clone  || ret == `delete )
		{
		    any  user_table_input   = UI( `QueryWidget(`id(`user_table), `CurrentItem) );
		    if(  user_table_input != nil ) user_in_work = lookup( current_users , user_table_input );
		    else
		    {
			UI(`MessagePopup(_("Please select an entry in the user table")));
			ret = `not_next;
		    }
		   
		}
	    } until ( ret != `not_next  );
	if ( ret == `back) ret = `exit;

	save_focus( UI::QueryWidget(`id(`user_table), `CurrentItem), ret, `user);

	return ret;
    }

    
    /**
     * Details of adding/cloning/editing dialog
     * @return symbol
     */
    global define usersEditUserDetails( ) ``{

	

	//load the current usersettings from user_in_work
	symbol what           = lookup( user_in_work , "what"     , `nix );
	string username       = lookup( user_in_work , "username" , ""   );
        string fullname       = lookup( user_in_work , "fullname" , ""   ); 
	string home           = lookup( user_in_work , "home"     , ""   );
	string shell          = lookup( user_in_work , "shell"    , ""   );
	string grouplist      = lookup( user_in_work , "grouplist", ""   );
	integer uid           = lookup( user_in_work , "uid"      , max_uid );
	integer old_uid       = 0;
	integer gid           = lookup( user_in_work, "gid"       , max_uid );
	fullname              = username + ", " + fullname;
	list available_shells = usersReadShells(`items);
	list available_groups = [];
	

	// fill the list available_groups and set the user default group true
	foreach ( `key, `group,  current_groups, ``{

	    if ( lookup(group ,"todo", "" ) != `delete )
	    {
		if ( key == gid )
		{
		    available_groups = add( available_groups ,`item( `id(lookup( group , "groupname" , "" )),
									 lookup( group , "groupname" , "" ) , true));
		}
		else
		{
		    available_groups = add( available_groups , `item( `id(lookup( group , "groupname" , "" )),
									  lookup( group , "groupname" , "" )));
		}	   
	    }
	});

	
	term edit_defaultgroup = `Bottom(`ComboBox(`id(`defaultgroup), `opt(`hstretch), _("Default &group"), available_groups ));
	term edit_shell        = `Bottom(`ComboBox(`id(`shell       ), `opt(`hstretch), _("Login &shell"), available_shells ));
	
	term contents = 
	    `HVSquash(
		     `HBox(
			   `HSpacing(1),
			   `VBox(
			   `VSpacing(1),
			   // User account information, forename or first name
			   `TextEntry(`id(`fullname), _("&Detaild profile for user:"), fullname),
			   `VSpacing(1),
			   `HBox(
				 `HWeight(40, edit_defaultgroup),	
				 // input field for login name,
				 `HSpacing(1),
				 `HWeight(40, `Bottom(`TextEntry( `id(`uid), _("User &ID (uid)"), sformat("%1",uid ))))
				)	,
			   `VSpacing(0.5),	   
			   `HBox(
				 `HWeight(40, `Bottom(`TextEntry( `id(`home), _("&Home directory"), home ))),
				 `HSpacing(1),
				 `HWeight(40,  edit_shell )
				 ),
			   `VSpacing(2),	
			   `TextEntry(`id(`grouplist), _("&Additional group membership (group1, group2, .. )")
				      ,grouplist ),
			   `VSpacing(2)
			   ),
			   `HSpacing(1))
			   );

	UI(`SetWizardContentsButtons(_("Add/Edit User Properties - Details"),
		                     contents,
				     usersEditUserDetailsHelp(),
			             UI::BackButtonLabel(),
				     UI::OKButtonLabel()));

	//Modify the dialog 
	UI(`ChangeWidget(`id(`fullname), `Enabled, false ));
	UI(`ChangeWidget(`id(`shell),    `Value,   shell ));
	if ( what == `edit_user ) UI(`ChangeWidget(`id(`uid), `Enabled, false ));


	// user input
	symbol ret = `next;
	repeat
	    {
		ret = UI(`UserInput());
		if ( ret == `next )
		{
		    string  new_home          = UI(`QueryWidget(`id(`home),        `Value));
		    string  new_shell         = UI(`QueryWidget(`id(`shell),       `Value));
		    string  new_uid           = UI(`QueryWidget(`id(`uid),         `Value));
		    string  new_defaultgroup  = UI(`QueryWidget(`id(`defaultgroup),`Value));
		    string  new_grouplist     = UI(`QueryWidget(`id(`grouplist),   `Value));
		    boolean input_ok          = true;
		    integer new_i_uid         = tointeger( new_uid );
		    
		    
		    // check the uid
		    if ( (what == `add_user) && (new_i_uid != uid) )
		    {
			
			if( !( new_i_uid >= 0  && new_i_uid <= max_uid ))
			{
			    string error = sformat(UI(_("The selected User Id is not allowed.
Please select a valid integer between 0 and %1")), max_uid );
			    UI(`ErrorPopup( error ));
			    UI(`SetFocus(`id(`uid)));
			    continue;
			}
		   
			if( new_i_uid <= max_system_uid )
			{
			    
			    // tell the max_system_uid
			    string error = sformat(UI(_("The selected User Id is a system Id,
because the Id is smaller than %1. \nDo you really want to create a new system user")), max_system_uid );
			    if( ! UI(`YesNoPopup( error )))
			    {
				UI(`SetFocus(`id(`uid)));
				continue;
			    }
			    
			}

			if(  haskey( current_users ,  new_i_uid ) && ( uid != new_i_uid ) )
			{
			    UI(`ErrorPopup(_("The inputted User Id is reserved.
Please select a another User Id")));
			    UI(`SetFocus(`id(`uid)));
			    continue;
			}
		    }
		    

		    
		    // check the defaultgroup ( replace by filter!! )
		    foreach ( `key, `group,  current_groups, ``{
			if( lookup( group, "groupname", "") == new_defaultgroup )
			{
			    gid = lookup(group, "gid", max_gid);
			}
		    });

		    
		    // check the homedirectory
		    if ( home != new_home  )
		    {
			if( (nil != findfirstnotof( new_home, valid_home_chars )) ||
			    (  0 != findfirstof( new_home, "/")   ))
			{
			    UI(`ErrorPopup(_("The home directory  may only contain the following characters:
a..zA..Z0..9/
Please try again.")));
			    UI(`SetFocus(`id(`home)));
			    continue;
			}
			y2milestone("be1 . dir");
			//if ( contains( usersUsersRead(`homelist), new_home ) || ( SCR(`Read (.target.dir , new_home )) != nil) )
			if ( contains( usersUsersRead(`homelist), new_home ) || SCR::Read(.target.size, new_home ) !=-1  )
			{
			    UI(`ErrorPopup(_("The home directory is used from another user.
Please try again.")));
			    UI(`SetFocus(`id(`home)));
			    continue;
			    
			}
		    }

		    // chech the grouplist
		    if( new_grouplist != grouplist  )
		    {
			if( nil == findfirstnotof( new_grouplist ,  valid_grouplist_chars ) )
			{ 
			    // remove last,""
			    list new_groups  = splitstring(new_grouplist, "," );
			    new_groups   = filter(`k, new_groups, ``( k != ""));

			    //if two entries for one group in new_groups delete one
			    list tmp_new_groups  = new_groups;
			    list double_entries = [];
			    foreach( `new_group, tmp_new_groups , ``{
			    if ( (size( filter(`k, tmp_new_groups , ``( k == new_group ))) > 1 ) &&
				 ( ! contains( double_entries, new_group) ))
			    {
				double_entries =  add( double_entries ,  new_group );
				new_groups = filter(`k, new_groups , ``( k != new_group ));
				new_groups = add( new_groups , new_group );
				
				
			    }
			});
			new_grouplist  = mergestring( new_groups ,",");
			    
			    boolean input_ok = true;
			    foreach( `new_group, new_groups , ``{
				if( input_ok )
				{
				    boolean found = false;
				    foreach(`key, `exist_group, current_groups, ``{
					if( lookup( exist_group, "groupname", "") == new_group )
					{
					    found = true;
					}
				    });
				    if ( found == false )
				    {
					UI(`ErrorPopup(_("You can only assign the user
groups that really exists.
Please try again.")));
					UI(`SetFocus(`id(`grouplist)));
					input_ok = false;
				    }
				}
			    });
			    if( ! input_ok ) continue;
			}
			else
			{
			    UI(`ErrorPopup(_("The groupfield may contain only
letters and digits.
Please try again.")));
			    UI(`SetFocus(`id(`grouplist)));
			    continue;
			}
		    }

		
		    // update user_in_work
		    user_in_work = add( user_in_work, "home"      , new_home );
		    user_in_work = add( user_in_work, "shell"     , new_shell);
		    user_in_work = add( user_in_work, "gid"       , gid      );
		    user_in_work = add( user_in_work, "uid"       , new_i_uid);
		    user_in_work = add( user_in_work, "grouplist" , new_grouplist);
		}    
	    } until ( ret == `next || ret == `abort  || ret == `back || ret == `cancel );
	
	if ( ret == `next ) ret = what;
	return ret;
    }


     /**
     * Propose a username.
     * @param forename forename
     * @param surname surname
     * @return string
     */
    global define usersProposeUsername( string forename, string surname ) ``{

	string  username             = "";
	string  default_login_name   = "lxuser";
	integer default_login_count  = 0;
	integer part_len             = 3;
	integer login_len            = part_len * 2;
	string  test_login_name      = default_login_name;
	while (true)
	{
	    if (  contains( usersUsersRead(`usernamelist), test_login_name ) )
	    {	
		default_login_count = default_login_count + 1;
		test_login_name  = default_login_name  + sformat("%1",default_login_count);
	    }
	    else
	    {
		default_login_name = test_login_name;
		break;
	    }   	    
	}

	
	string f_name = filterchars(tolower(forename), valid_logname_chars);
	integer f_len = size( f_name );

	string s_name = filterchars(tolower(surname), valid_logname_chars);
	integer s_len = size( s_name );
		    
	if ( f_len == 0 && s_len == 0 )	// both are missing
	{	
	    username = default_login_name;	// default login
	}
	else					// at least one is given
	{
	    if ( f_len >= part_len )
	    {
		if ( s_len >= part_len )	        // forename and surname long enough
		{
		    f_len = part_len;		// take part_len chars from each
		    s_len = part_len;
		}
		else				// surname shorter than 3 chars
		{
		    f_len = login_len - s_len;	// fill up with forename
		}
	    }
	    else				// forename shorter than 3 chars
	    {
		s_len = login_len - f_len;	// fill up with surname
	    }
			    
	    // build login name
	    username = substring( f_name, 0, f_len ) + substring( s_name, 0, s_len );
	    if (size (username) < 2) username = default_login_name;
	    else {
		string firstchar = substring(username, 0, 1);
		if (firstchar < "a" || firstchar > "z")
		    username = default_login_name;
	    }
	}
	return username;
    }
    

    /**
     * Split fullname in forename and surname.
     * @param what `surname or `forename
     * @param fullname fullname
     * @param uid uid
     * @return string
     */
    global define usersSplitFullName( symbol what, string fullname, integer uid) ``{

	list    strs    = splitstring(fullname , " ");
	integer i       = 1;
	string surname  = "";
	string forename = "";
	
	if( uid <= max_system_uid )
	{
	    if ( what == `surname  ) return fullname;
	    if ( what == `forename ) return "";
	}
	
	foreach( `str, strs, ``{
	    
	    if ( i < size( strs) )
	    {
		if( forename == "" ) forename = str;
		else forename = forename + " " + str;
	    }
	    else  surname = str;
	    i = i + 1;
	});
	if ( what == `surname  ) return surname;
	if ( what == `forename ) return forename;

  }

    
    /**
     * Function that adds or edits a user.
     * @param what `add_user or `edit_user
     * @return symbol
     */
    global define usersEditUser(symbol what) ``{
	map dialog_labels = $[
	    `add_user:   UI(_("Add a new user")),
	    `clone_user: UI(_("Add a new user by cloning user ")),
	    `edit_user:  UI(_("Edit an existing user"))
	];

	
	string  username       = lookup( user_in_work, "username", "");
	string  fullname       = lookup( user_in_work, "fullname", "");
	integer gid            = lookup( user_in_work, "gid"     , 100 );
	string  home           = lookup( user_in_work, "home"    , "/home/");
	string  shell          = lookup( user_in_work, "shell"   , "/bin/bash");
	integer uid            = lookup( user_in_work, "uid"     , max_uid );
	string  surname        = lookup( user_in_work, "surname" , "empty" ); 
	string  forename       = lookup( user_in_work, "forename", "empty" ); 
	string  password       = lookup( user_in_work, "password", "");
	string  grouplist      = lookup( user_in_work, "grouplist", "empty");
	if ( grouplist == "empty" && what == `edit_user)  grouplist = findGroupsBelongUser(username);
	if ( grouplist == "empty" && what == `add_user )  grouplist = "dialout,uucp,video,audio";
	if ( surname   == "empty" ) surname  =  usersSplitFullName(`surname,  fullname, uid);
	if ( forename  == "empty" ) forename =  usersSplitFullName(`forename, fullname, uid);
	if ( uid == max_uid )  uid = usersFreeUid(current_users);
	
	
	term contents = 
	    `HSquash(`VBox(
	     
	        `VStretch(),
		// User account information, forename or first name
	       //   name_edit,

	       `VBox(
		     `TextEntry(`id(`forename), _("&First name:"), forename),
		     `TextEntry(`id(`surname),  _("&Last name:"),  surname )
		     ),
	       
		`VSquash(`HBox
		(
		    // input field for login name
		    `Bottom(`TextEntry( `id(`username), _("&User login:"), username )),
		    // push button to generate a login name from first and last name
		    `Bottom(`PushButton(`id(`propose), _("&Suggestion")))
		)),

		
		// User account information, first version of user password, both versions must match
		`Password(`id(`pw1), _("&Enter a password:"), ""),
		// User account information, second version of user password, retyped to avoid typos
		// This is a label, please use newline if it is longer than 48 characters
	       `Password(`id(`pw2), _("Re-enter the password for &verification:"), ""),
		
	       `VStretch(),
	       `PushButton(`id(`details), _("&Details..."))
	    ));

	

	

	
	UI(`SetWizardContentsButtons(lookup(dialog_labels, what, ""),
		                     contents,
			             usersEditUserHelp(),
			             UI::BackButtonLabel(),
				     UI::NextButtonLabel()));

	
	

	// Modify the dialog 
	if( what == `clone_user )      UI(`ChangeWidget(`id(`next) , `Label, _("&Clone")));
	else  if( what == `add_user )  UI(`ChangeWidget(`id(`next) , `Label, _("&Create")));
	else  if( what == `edit_user)  UI(`ChangeWidget(`id(`next) , `Label, _("&Ok")));
	
	if( uid <= max_system_uid && what == `edit_user )
	{
	    UI(`ChangeWidget(`id(`propose), `Enabled, false ));
	    UI(`ChangeWidget(`id(`forename),`Enabled, false ));
	}
	if( password != "")
	{
	    UI(`ChangeWidget(`id(`pw1), `Value ,default_pw));
	    UI(`ChangeWidget(`id(`pw2), `Value, default_pw));
	}

	
	symbol ret = `next;
	repeat
	    {
		ret = UI(`UserInput());
		
		
		if (ret == `propose  && ( !(what == `edit_user && uid <= max_system_uid) ) )
		{
		    string forename = UI(`QueryWidget(`id(`forename), `Value));
		    string surname  = UI(`QueryWidget(`id(`surname), `Value));
		    string username = usersProposeUsername( forename, surname );
		    UI(`ChangeWidget(`id(`username), `Value, username));
		}
		    	
		if ( ret == `next || ret == `details )
		{
		    string pw1   = UI(`QueryWidget(`id(`pw1),      `Value));
		    string pw2   = UI(`QueryWidget(`id(`pw2),      `Value));
		    username     = UI(`QueryWidget(`id(`username), `Value));
		    forename     = UI(`QueryWidget(`id(`forename), `Value));
		    surname      = UI(`QueryWidget(`id(`surname ), `Value));

		    if( forename != "" ) fullname = forename + " " + surname;
		    else                 fullname = surname;
		    
		    
		    if ( (what == `add_user  && fullname == "") ||
			 (what == `edit_user && fullname == "" && ( lookup( user_in_work , "fullname", "") != "") ) )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The name information is not
			// complete, the user is asked to complete the information
			UI(`ErrorPopup(_("Please enter your name.")));
			UI(`SetFocus(`id(`surname)));
			continue;
		    }
		    
		    if ( username == "" )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The username is empty (no user
			//  input).
			UI(`ErrorPopup(_("You didn't enter a username.
Please try again.
")));	
			UI(`SetFocus(`id(`username)));
                        continue;
		    }	
		    
		    if  (  ( size( username ) < 2 || size( username ) > 8 ) )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The username must have a size
			// between 2 and 8 characters.
			UI(`ErrorPopup(_("The username must be between 2 and 8 characters in length.
Please try again.
")));
			UI(`SetFocus(`id(`username)));
			continue;
		    }
		    
		    string firstchar = substring(username, 0, 1);
		    
		    if ( ( ! (firstchar >= "a" && firstchar <= "z") ||
			   nil != findfirstnotof( username, valid_logname_chars ) ) )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The login name may contain only
			// certain characters and must begin with a letter.
			UI(`ErrorPopup(_("The username may contain only
lower case letters and digits
and must begin with a letter.
Please try again.
")));
			UI(`SetFocus(`id(`username)));
			continue;
		    }

		    
		    // check login against passwd contents
		    if ( (username != lookup( user_in_work , "username", "")) &&
			 contains( usersUsersRead(`usernamelist), username ) )
		    {
			// Tell the user that the login he entered conflicts with
			// predefined logins in the passwd file.
			UI(`ErrorPopup(_("There is a conflict between the entered
login name and a predefined username.

Please try another one.
")));
			UI(`SetFocus(`id(`username)));
			continue;
		    }
		    
		    if (  pw1 != pw2 )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The two user password information
			// do not match
			UI(`ErrorPopup(_("The first and the second version
of the password are different.
Please try again.")));
			password = "";
			// Invalidate any old password
			
			// clear password inputfields in this case
			UI(`ChangeWidget(`id(`pw1), `Value, ""));
			UI(`ChangeWidget(`id(`pw2), `Value, ""));

			UI(`SetFocus(`id(`pw1)));
			continue;
		    }
		    
		    // Use the old password (if any) if no passwords were entered.
		    // only check pw1 here, its identical with pw2 as checked before
		    if ( (pw1 != default_pw) && (pw2 != default_pw ))
		    {
			if ( pw1 == "" )
			{
			    // There is a check whether the information from the
			    // UI is correct and complete.  The first user password
			    // information is empty (no user input)
			    UI(`ErrorPopup(_("You didn't enter a password.\nPlease try again.")));
			    password = "";
			  		    
			    // clear password inputfields in this case
			    UI(`ChangeWidget(`id(`pw1), `Value, ""));
			    UI(`ChangeWidget(`id(`pw2), `Value, ""));
			    
			    UI(`SetFocus(`id(`pw1)));
			    continue;
			}
			if ( size (pw1) < min_length_pas || size(pw1) > max_length_pas  )
			{
			    // There is a check whether the information from the
			    // UI is correct and complete.  The user password
			    // information must have a minimal size - 5 characters.
			    UI::ErrorPopup(sformat(_("The password must have between %1 and %2 characters.\nPlease try again."),
						   min_length_pas,
						   max_length_pas));
			    password = "";
			    
			    // clear password inputfields in this case
			    UI(`ChangeWidget(`id(`pw1), `Value, ""));
			    UI(`ChangeWidget(`id(`pw2), `Value, ""));
			    
			    UI(`SetFocus(`id(`pw1)));
			    continue;
			}
			
			if ( size(pw1) >= 5 )
			{
			    if ( nil != findfirstnotof( pw1, valid_password_chars ) )
			    {
				// There is a check whether the information from the
				// UI is correct and complete.  The user password may
				// contain only certain characters
				UI(`ErrorPopup(_("The password may only contain the following characters:
0..9, a..z, A..Z, and any of \"#* ,.;:._-+!$%&/|\?{[()]}\".
Please try again.")));
				password = "";
				
				
				// clear password inputfields in this case
				UI(`ChangeWidget(`id(`pw1), `Value, ""));
				UI(`ChangeWidget(`id(`pw2), `Value, ""));
				
				UI(`SetFocus(`id(`pw1)));
				continue;
			    }	
			}

			if( pam  && what == `add_user )
			{
			    password = cryptmd5(pw1);
			}
			else
			{
			    password = crypt (pw1);
			}
		    }

		    // bild default home dir
		    if ( what == `add_user && home == "/home/" )
		    {
			home = home + username;
			
			//if( SCR(`Read(.target.dir , home )) != nil )
			if(    SCR::Read(.target.size, home ) != -1  )
			{
			    UI(`ErrorPopup(_("The default home directory is used from another user.
Please press button Details and edit home directory.")));
			    continue;
			}
		    }
			  

		    user_in_work = $[
				     "what"        :  what ,
				     "fullname"    :  fullname,
			 	     "gid"         :  gid,
				     "home"        :  home,
				     "password"    :  password, 
				     "shell"       :  shell,
				     "uid"         :  uid,
				     "username"    :  username,
				     "grouplist"   :  grouplist,
				     "forename"    :  forename,
				     "surname"     :  surname 
		    ];

		}
		
	    } until ( ret == `next || ret == `details || ret == `abort  || ret == `back || ret == `cancel );

	return ret;
    }


    
    /**
     * Delete the user saved in user_in_work from current_users and
     * add a entry with a shell delete command to the map user_settings.
     * @return symbol
     */
    global define usersDeleteUser() ``{
	string username       = lookup( user_in_work, "username", "");
	map new_current_users = $[];
	
	// if the user has log on system
	SCR(`Execute(.target.bash, "/bin/ls -l /proc >/tmp/lsl"));
	list proc  = SCR(`Read(.tmp.lsl ));
	SCR(`Execute(.target.bash, "/bin/rm /tmp/lsl"));

        // the user that should deleted is present
	if( size( filter(`k, proc, ``( (username == lookup(k, "username", "")) &&
				       (groupIdToName(lookup( user_in_work , "gid", 100)) == lookup( k, "groupname", ""))))) > 0 )
	{
	    UI(`ErrorPopup(_("You can not delete this user, because the user is present.
Please log off the user first.")));
	    user_in_work = $[];
	    return `next; 
	}
	
	
	
	// if the user want to delete a system user
	if ( lookup(user_in_work , "uid") <= max_system_uid )
	{	
	    if(! UI(`YesNoHeadlinePopup(_("The marked user is a system user."), _("Do you really want to delete this user"))))
	    {
		user_in_work = $[];
		return `next;
	    }
	}


	// delete the user from the map current_users
	foreach(`key, `user, current_users, ``{
	    if( lookup( user_in_work, "uid") != key) new_current_users = add( new_current_users , key, user);
	});
	current_users = new_current_users;

	if (  SCR::Read(.target.size,"/usr/sbin/userdel.local") != -1 )
	{
	    usersAddTodo(("/usr/sbin/userdel.local " + username),
			 `del_user_local,
			 UI(_("Can't execute /usr/sbin/useradd.local")));
	}
	    
	usersAddTodo("/usr/sbin/userdel " + username ,
		     `del_user,
		     sformat(UI(_("Can't delete the user %1")), username) );
	usersAddChownHome( lookup( user_in_work, "home", "" ), "root", "root" );

	
        //build a shell delete command and save it to user_settings
	if(! lookup( user_in_work, "exist", true ) )
	{
	    //UI(`MessagePopup( lookup( user_in_work , "home", "" )));
	    if( lookup( user_in_work , "home", "" ) != "") 
		usersAddRmDir( lookup( user_in_work , "home", "" ));
	}
	   
	
		    
		    
	//delete the user from the map current_groups (userlist)
	map tmp_current_groups = current_groups;
	foreach( `key, `group, tmp_current_groups, ``{

	    string userlist  = lookup(group, "userlist" , "");
	    map    new_group = group;
	    
	    if( issubstring( userlist, username ) )
	    {
		list split_userlist = splitstring( userlist, ",");
		string new_userlist = "";
		
		foreach( `entry, split_userlist, ``{
		    
		    if( entry != username )
		    {
			if( new_userlist == "") new_userlist = entry;
			else new_userlist = new_userlist + "," + entry;
		    }
		});
		new_group = add( new_group, "userlist", new_userlist );
		current_groups = add( current_groups, key , new_group );
	    }
	});

	if (test_mode ) SCR( `Write(.dumpto.tmp.user_set,   user_settings  ));
	user_in_work = $[];
	return `next;
    }



    /**
     * The second of the two main dialogs.
     * @return symbol
     */
    global define usersGroupsDialog() ``{

	group_in_work = $[];
	
	term contents = 
	    `VBox(rbUsersGroup(`groups),
		  `Table(`id(`group_table ), `opt(`notify) , `header(_("Group name"), _("Group ID"), _("Group members")),
		         usersGroupsRead(`items) ),
	          `HBox
		  (
		      `PushButton(`id(`new),   _("&Add")),
		      // `PushButton(`id(`clone), _("&Clone")),
		      `PushButton(`id(`edit),  _("&Edit")),
		      `HStretch(),
		      `PushButton(`id(`delete), _("&Delete"))
		  )
	    );

	UI(`SetWizardContentsButtons(_("User and group administration"),
		                     contents,
			             usersGroupsDialogHelp(),
			             UI::CancelButtonLabel(),
				     UI::FinishButtonLabel()));

	if( focusline_group != 0 )
	    UI::ChangeWidget(`id(`group_table), `CurrentItem, focusline_group );
	
	// save marked tabelentry to group_in_work
	symbol ret = `next;
	repeat
	    {
		ret = UI(`UserInput());

		// double click
		if( ret == `group_table )
		    ret = `edit;
			
		if ( ret == `edit  || ret == `clone  || ret == `delete )
		{
		    integer group_table_input = UI( `QueryWidget(`id(`group_table), `CurrentItem) );
		    if( group_table_input != nil ) group_in_work = lookup( current_groups , group_table_input );
		    else
		    {
			UI(`ErrorPopup(_("Please select an entry in the group table")));
			ret = `not_next;
		    }
		   
		}

		
		
	    } until ( ret != `not_next  );
	if( ret == `back) ret = `exit ;
	
	save_focus( UI::QueryWidget(`id(`group_table), `CurrentItem), ret, `group);
	return ret;
    }



    /**
     * Details of adding/cloning/editing dialog
     * @param what `add_user, `clone_user or `edit_user
     * @return symbol
     */
    global define usersEditGroup(symbol what ) ``{

	map dialog_labels = $[
			      `add_group:   UI(_("Add a new group")),
			      `clone_group: UI(_("Add a new group by cloning group ")),
			      `edit_group:  UI(_("Edit an existing group"))
	];

    
	// load group saved in group_in_work
	string  groupname     = lookup( group_in_work, "groupname", "");
	string  password      = lookup( group_in_work, "password" , "x");
	integer gid           = lookup( group_in_work, "gid", max_gid );
	string  userlist      = findUsersBelongGroup(gid);
	if( gid == max_gid )   gid = usersFreeGid(current_groups);

	
	// make dialog
	term contents = 
	    `HSquash(`VBox
	    (	     
	       `VStretch(),
		// User account information, forename or first name
	       `VSquash(`HBox
		(
		    // input field for login name
		    `Bottom(`TextEntry( `id(`groupname), _("&Group name"), groupname )),
		    // push button to generate a login name from first and last name
		    `HSpacing(4),
		    `Bottom(`TextEntry( `id(`gid), _("Group &id (gid)"), sformat("%1", gid) ))
		    )),
	       `VStretch(),
	       `HBox(
		     `HSpacing(10),
		     `VBox(
			   // User account information, first version of user password, both versions must match
			   `Password(`id(`pw1), _("&Enter a password:"), ""),
			     // User account information, second version of user password, retyped to avoid typos
			   // This is a label, please use newline if it is longer than 48 characters
			   `Password(`id(`pw2), _("Re-enter the password for &verification:"),  "")
			   ),
		     `HSpacing(10)
		     ),
	       `VStretch(),
	       `TextEntry(`id(`userlist), _("&Members of this group (member1 , member2, ..)"), userlist ),
	       `VStretch()


	    ));
	
	UI(`SetWizardContentsButtons(lookup(dialog_labels, what, ""),
		                     contents,
			             usersEditGroupHelp(),
			             UI::BackButtonLabel(),
				     UI::NextButtonLabel()));

	


	if( what == `clone_group )       UI(`ChangeWidget(`id(`next) , `Label, _("&Clone")));
	else   if( what == `add_group )  UI(`ChangeWidget(`id(`next) , `Label, _("&Create")));
	else   if( what == `edit_group)  UI(`ChangeWidget(`id(`next) , `Label, _("&Ok")));

	if( what == `edit_group  )
	{
	    if( password != "x"  )
	    {
		UI(`ChangeWidget(`id(`pw1), `Value, default_pw));
		UI(`ChangeWidget(`id(`pw2), `Value, default_pw));
	    }
	}


	symbol ret = `next;
	repeat
	    {
		ret = UI(`UserInput());

		
		if ( ret == `next  )
		{
		    string pw1            = UI(`QueryWidget(`id(`pw1),       `Value));
		    string pw2            = UI(`QueryWidget(`id(`pw2),       `Value));
		    string new_groupname  = UI(`QueryWidget(`id(`groupname), `Value));
		    string new_gid        = UI(`QueryWidget(`id(`gid),       `Value));
		    string new_userlist   = UI(`QueryWidget(`id(`userlist),  `Value));  

		    
		   
		    
		    if ( new_groupname == "" )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The new_groupname is empty (no group
			//  input).
			UI(`ErrorPopup(_("You didn't enter a groupname.
Please try again.
")));	
			UI(`SetFocus(`id(`groupname)));
                        continue;
		    }	

		    
		    if  (  ( size( new_groupname ) < 2 || size( new_groupname ) > 8 ) )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The groupname must have a size
			// between 2 and 8 characters.
			UI(`ErrorPopup(_("The groupname must be between 2 and 8 characters in length.
Please try again.
")));
			UI(`SetFocus(`id(`groupname)));
			continue;
		    }
		    
		    string firstchar = substring( new_groupname, 0, 1);
		    
		    if ( ( ! (firstchar >= "a" && firstchar <= "z") ||
			   nil != findfirstnotof(  new_groupname, valid_group_chars ) ) )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The groupname may contain only
			// certain characters and must begin with a letter.
			UI(`ErrorPopup(_("The groupname may contain only
lower case letters and digits
and must begin with a letter.
Please try again.
")));
			UI(`SetFocus(`id(`groupname)));
			continue;
		    }
		    
		
		    if ( (((what == `edit_group ) && ( new_groupname != groupname )) || ( what != `edit_group )) &&
			 contains( usersGroupsRead(`groupnamelist ),  new_groupname ) )
		    {
			// Tell the user that the groupname he entered conflicts with
			// predefined groupnames in the groups file.
			UI(`ErrorPopup(_("There is a conflict between the entered
groupname and a predefined groupname.
Please try another one.
")));
			UI(`SetFocus(`id(`groupname)));
			continue;
		    }
		    
		    if (  pw1 != pw2 )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The two user password information
			// do not match
			UI(`ErrorPopup(_("The first and the second version
of the password are different.
Please try again.")));
			password = "x";
			// Invalidate any old password
			
			// clear password inputfields in this case
			UI(`ChangeWidget(`id(`pw1), `Value, ""));
			UI(`ChangeWidget(`id(`pw2), `Value, ""));

			UI(`SetFocus(`id(`pw1)));
			continue;
		    }
		    
		    // Use the old password (if any) if no passwords were entered.
		    // only check pw1 here, its identical with pw2 as checked before
		    if (  ( pw1 != "") &&
			  ( (pw1 != default_pw) && (pw2 != default_pw))  )
		    {
			
			if ( size (pw1) < min_length_pas || size(pw1) > max_length_pas  )
			{
			    // There is a check whether the information from the
			    // UI is correct and complete.  The user password
			    // information must have a minimal size - 5 characters.
			    UI::ErrorPopup(sformat(_("The password must have between %1 and %2 characters.\nPlease try again."),
						   min_length_pas,
						   max_length_pas));
			    password = "x";
			    
			    // clear password inputfields in this case
			    UI(`ChangeWidget(`id(`pw1), `Value, ""));
			    UI(`ChangeWidget(`id(`pw2), `Value, ""));
			    
			    UI(`SetFocus(`id(`pw1)));
			    continue;
			}
		
			
			
			if ( pw1 != "" )
			{
			    if ( nil != findfirstnotof( pw1, valid_password_chars ) )
			    {
				// There is a check whether the information from the
				// UI is correct and complete.  The user password may
				// contain only certain characters
				UI(`ErrorPopup(_("The password may only contain the following characters:
0..9, a..z, A..Z, and any of \"#* ,.;:._-+!$%&/|\?{[()]}\".
Please try again.")));
				password = "x";
				
				
				// clear password inputfields in this case
				UI(`ChangeWidget(`id(`pw1), `Value, ""));
				UI(`ChangeWidget(`id(`pw2), `Value, ""));
				
				UI(`SetFocus(`id(`pw1)));
				continue;
			    }	
			}

			
			if( pam  && what == `add_group )
			{
			    password  = cryptmd5(pw1);
			}
			else
			{
			    password  = crypt (pw1);
			}
		    }

		    // need for update /etc/gshadow
		    if( pw1 == "" ) password = "*";
		   
		    
		    if ( userlist != new_userlist )
		    {
			// remove last ,
			list new_users = splitstring(new_userlist , "," );
			new_users   = filter(`k, new_users , ``( k != ""));

			//if two entries for one users in new_users delete one
			list tmp_new_users  = new_users;
			list double_entries = [];
			foreach( `new_user, tmp_new_users , ``{
			    if ( (size( filter(`k, tmp_new_users , ``( k == new_user ))) > 1 ) &&
				 ( ! contains( double_entries, new_user) ))
			    {
				double_entries =  add( double_entries ,  new_user );
				new_users = filter(`k, new_users , ``( k != new_user ));
				new_users  = add( new_users , new_user );
				
				
			    }
			});
			new_userlist  = mergestring( new_users ,",");
			
			if( nil == findfirstnotof( new_userlist ,  valid_grouplist_chars ) ) // the same as valid_userlist_chars
			{
			   
			    boolean all_found = true;
			    
			    foreach( `new_user, new_users , ``{

				boolean found = false;
				foreach(`key, `exist_user, current_users, ``{

				    if( lookup( exist_user, "username", "") == new_user )
				    {
					found = true;
				    }
				});
				if ( found == false )
				{
				    if ( new_user != "")
				    {		
					UI(`ErrorPopup(_("You can only assign the group
users that really exists.
Please try again.")));
					UI(`SetFocus(`id(`userlist)));
					all_found = false;
				    }
				}

			
			    
			    });
			    if (!all_found) continue;

			    // delete something
			    if( size( userlist ) > size( new_userlist) )
			    {
				list old_users = splitstring( userlist, "," );
				foreach(`old_user, old_users, ``{
				    
				    if( ! issubstring( new_userlist, old_user ) )
				    {
					// some user was deleted by the user
					if(   issubstring( findUsersBelongGroup( gid), old_user ) &&
					      ( !issubstring( lookup( lookup( current_groups, gid),  "userlist", ""), old_user )))
					{
					    string error_text = sformat(UI(_("You can't delete the user -%1- from this group,
because the user's defaultgroup is this group")), old_user );
					    UI(`ErrorPopup(error_text ));
					    UI(`ChangeWidget(`id(`userlist), `Value, userlist));
					    UI(`SetFocus(`id(`userlist)));
					    all_found = false;
					}	
				    }
				});
			    }
			    if (!all_found) continue;
			}
			else
			{
			    UI(`ErrorPopup(_("Syntax in Members of this group is not ok.
Please try again.")));
			    UI(`SetFocus(`id(`userlist)));
			    continue;
			}
		    }
	
		    // check the uid
		    if ( tointeger(new_gid) != gid )
		    {
			integer new_i_gid = tointeger(new_gid);
			
			if( !( new_i_gid >= 0  && ( new_i_gid <= max_gid )) && ( new_i_gid != nil ) )
			{
			    UI(`ErrorPopup(sformat(UI(_("The selected Group Id is not allowed.
Please select a valid integer between 0 and %1")), max_gid)));
			    UI(`SetFocus(`id(`gid)));
			    continue;
			}
			
			
			if ( haskey( current_groups , new_i_gid) && ( gid != new_i_gid ))
			{
			    if ( lookup(lookup( current_groups, new_i_gid ), "todo", "") != `delete )
			    {
				UI(`ErrorPopup(_("The inputted Group Id is reserved.
Please select a another Group Id")));
				UI(`SetFocus(`id(`gid)));
				continue;
			    }
			}

			if ( (what != `add_group ) &&  (new_i_gid  <=max_system_gid ) && ( gid > max_system_gid ) )
			{
			    UI(`ErrorPopup(_("The inputted Group Id is a system Id.
Please try again.")));
			    UI(`SetFocus(`id(`gid)));
			    continue;
			}

			if ( (what != `add_group ) && (new_i_gid  > max_system_gid ) && ( gid <= max_system_gid ) )
			{
			    UI(`ErrorPopup(_("The inputted Group Id is not a system Id.
Please try again.")));
			    UI(`SetFocus(`id(`gid)));
			    continue;
			    
			}
		    }
		    
		    // if savething has changed
		    if ( ((what == `edit_group) && (  (gid          != tointeger(new_gid))  ||
						      (groupname    != new_groupname )      ||
						      (password     != "x"           )      ||
						      (userlist     != new_userlist  )          )) ||
			 (what != `edit_group ) )
		    {

			//save the current group in group_in_work for usersGroupSaveToMap( )
			group_in_work = $[
					  "what"      : what,
					  "groupname" : new_groupname,
					  "password"  : password,
					  "userlist"  : new_userlist,
					  "gid"       : tointeger(new_gid),
					  "old_gid"   : gid
			];
		    }
		    else {
			// nothing has changed - no save
			ret = `back;
		    }
		}
	    } until ( ret == `next ||  ret == `abort  || ret == `back || ret == `cancel );

	return ret;
    }



    
    /**
     * Delete the Group saved in group_in_work from current_groups and
     * add a entry with a shell delete command to the map user_settings.
     * @return symbol
     */
    global define usersDeleteGroup() ``{

	
	//if no  user in this group
	if ( (size ( filter(`k, `v, current_users , ``(lookup(v,"gid") == lookup(group_in_work , "gid")))) == 0) &&
	     (lookup( group_in_work , "userlist", "") == "" ) )
	{
	    
	    //if the group a system group ask the user ..
	    if ( lookup(group_in_work , "gid") <= max_system_gid )
	    {	
		if(! UI(`YesNoHeadlinePopup(_("The marked group is a system group."), _("Do you really want to delete this group"))))
		    return `next;
	    }

	    
	    //copy all other groups in new_current_groups
	    map new_current_groups = $[];
	    foreach(`key, `group, current_groups, ``{
		if( lookup(group_in_work , "gid") != key) new_current_groups = add( new_current_groups , key, group);
	    });
	    current_groups = new_current_groups;


	    //delete the group in current_gshadow
	    //usersDeleteGroupFromShadow( lookup( group_in_work, "groupname", ""));
	    
	    //add a shell delete command to user_settings
	    usersAddTodo(("/usr/sbin/groupdel " + lookup( group_in_work, "groupname", "")),
			 `del_group,
			 sformat(UI(_("Can't delete group %1 ")),lookup( group_in_work, "groupname", "")));
	  
	}
	else
	{	
	    UI(`WarningPopup(_("You can't delete this group because
there are users in the group.
Delete this users first.")));
	}

	if( test_mode ) SCR( `Write(.dumpto.tmp.user_set,   user_settings  ));
	group_in_work = $[];
	return `next;
    }


     /**
     * Dialog to save the Groups and Usersettings to system
     * @return symbol
     */
    global define usersSaveDialog() ``{
	
	if ( size ( user_settings ) == 0 ) return `next;

	SCR(`Execute(.target.bash, "/bin/cp /etc/passwd /etc/passwd.YaST2save"));
	SCR(`Execute(.target.bash, "/bin/cp /etc/gshadow /etc/gshadow.YaST2save"));
	SCR(`Execute(.target.bash, "/bin/cp /etc/group /etc/group.YaST2save"));
	
	term contents =   `VBox(
				`VSpacing( 2 ),
				`Left(`Heading (_("Save modified settings to system."))),
				`HVCenter(`ProgressBar(`id(`bar), _("save ......"))),
				`VSpacing( 2 )	
				);

	UI(`SetWizardContentsButtons(  "" ,
				       contents,
				       usersSaveDialogHelp(),
				       UI::BackButtonLabel(),
				       UI::NextButtonLabel()));



	if( test_mode ) SCR( `Write(.dumpto.tmp.current_users_final,     current_users ));
	if( test_mode ) SCR( `Write(.dumpto.tmp.current_groups_final,    current_groups ));
	if( test_mode ) SCR( `Write(.dumpto.tmp.user_settings_final,     user_settings  ));
	integer value = 0;
	boolean ok    = true;
	    
	if ( size( user_settings ) != 0)
	{
	
	    foreach( `key, `todomap, user_settings,``{
		
		symbol what  = lookup ( todomap , "what" , `error );
		any    ret   = 1;
		
		if( what == `set_group_password )
		{
		   
		    string groupname = lookup ( todomap , "groupname" ,"");
		    string password  = lookup ( todomap , "password"  ,"");

                    //read the /etc/gshado file new
		    usersGroupsShadowReadFromDisk();

		    //get groupmap from  current_gshadow 
		    map group       = usersReturnGroupFromShadow(  groupname );

		    //delete this map in current_gshadow
		    if ( group != $[] )  usersDeleteGroupFromShadow( groupname );

		    //add a new  groupmap to current_gshadow
		    map new_group       = $[
					    "password" : password,
					    "disposer" : "root" ,
					    "groupname": groupname,
					    "userlist" : lookup( group , "userlist" ,"")
		    ];
		   
		    current_gshadow = add( current_gshadow, new_group);

		    //save /etc/gshado file 
		    ret = SCR(`Write(.etc.gshadow, current_gshadow ));
		}
		else
		{
		    // execute the save string from user_settings 
		    string todo  = lookup ( todomap , "todo" , "" );
		    ret =  SCR(`Execute(.target.bash, todo ));
		}

		if( ret == 0 )
		{
		    value	= value + 1;
		    UI(`ChangeWidget(`id(`bar), `Value, ((value / size(user_settings))  * 100 ) ));
		}
		else
		{
		    ok = false;
		    UI(`ErrorPopup( lookup ( todomap , "error", "" )));
		}
	    });

	    if ( !ok)
	    {
		UI(`ErrorPopup(_("The new user and group are not configured.")));	

	    }
	    else
	    {
		UI(`MessagePopup(_("The new user and group settings
are configured and usable")));	

	    }
	}
	
	return `next;
    }


    
} // End
