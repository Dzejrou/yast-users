/**
 * File:
 *  users/ui.ycp
 *
 * Module:
 *  Configuration of the users and groups
 *
 * Summary:
 *  Screens and UI routines for the users module
 *
 * Authors:
 *  Jan Holesovsky <kendy@suse.cz>, 2001
 *
 * $Id$
 *
 */

{
    textdomain "users";

    // ===== includes =================================================
    include "ui/wizard_dialog.ycp";
    include "ui/common_messages.ycp";

    /**
     * Define the switch between Users and Groups administration.
     * This is used in <TT>usersUsersDialog()</TT> and <TT>usersGroupsDialog</TT>.
     * @param symbol what can be <TT>`users</TT> or <TT>`groups</TT>
     */
    global define rbUsersGroup(symbol what) ``{
	return 
	    `Left(`RadioButtonGroup(`HBox
	    (
	        `RadioButton(`id(`switch_users), `opt(`notify),
			     _("Users administration"), what == `users),
		`RadioButton(`id(`switch_groups), `opt(`notify),
			     _("Groups administration"), what == `groups)
	    )));
    }

    /**
     * The first of the two main dialogs.
     */
    global define usersUsersDialog() ``{
	string help_text = "TODO HELP user";

	term contents = 
	    `VBox(rbUsersGroup(`users),
		  `Table(`header(_("State"), _("Login"), _("Name"), _("Groups")),
		         []),
	          `HBox
		  (
		      `PushButton(`id(`new),       _("&Add")),
		      `PushButton(`id(`clone),     _("&Clone")),
		      `PushButton(`id(`edit),      _("&Edit")),
		      `HStretch(),
		      `PushButton(`id(`delete),    _("&Delete"))
		  )
	    );

	UI(`SetWizardContentsButtons(_("User and group administration"),
		                     contents,
			             help_text,
			             CancelButtonLabel(),
				     FinishButtonLabel()));

	symbol ret = UI(`UserInput());
	
	/* TODO change the current_user here */

	return ret;
    }
    
    /**
     * The second of the two main dialogs.
     */
    global define usersGroupsDialog() ``{
	string help_text = "TODO HELP Group";

	term contents = 
	    `VBox(rbUsersGroup(`groups),
		  `Table(`header(_("Name"), _("GID")),
		         []),
	          `HBox
		  (
		      `PushButton(`id(`new),   _("&Add")),
		      `PushButton(`id(`clone), _("&Clone")),
		      `PushButton(`id(`edit),  _("&Edit")),
		      `HStretch(),
		      `PushButton(`id(`delete),      _("&Delete"))
		  )
	    );

	UI(`SetWizardContentsButtons(_("User and group administration"),
		                     contents,
			             help_text,
			             CancelButtonLabel(),
				     FinishButtonLabel()));

	symbol ret = UI(`UserInput());
	
	/* TODO change the current_group here */

	return ret;
    }
    
    /**
     * Function that adds, clones or edits a user
     * @param term what <TT>`add_user</TT>, <TT>`clone_user</TT> or <TT>`edit_user</TT>
     */
    global define usersEditUser(symbol what) ``{
	map dialog_labels = $[
	    `add_user:   UI(_("Add a new user")),
	    `clone_user: UI(_("Add a new user using cloning")),
	    `edit_user:  UI(_("Edit an existing user"))
	];

	string help_text = "TODO HELP Add/Clone/Edit user";

	string username = "";
	string fullname = "";
	if (what == `clone_user || what == `edit_user)
	{
	    username = lookup(current_user, "username", "");
	    fullname = lookup(current_user, "fullname", "");
	}
	
	term contents = 
	    `HSquash(`VBox
	    (
	        `VStretch(),
		
		// User account information, forename or first name
		`TextEntry(`id(`forename), _("&Name:"), fullname),

		`VSquash(`HBox
		(
		    // input field for login name
		    `Bottom(`TextEntry( `id(`loginname), _("&User login:"), username )),
		    // push button to generate a login name from first and last name
		    `Bottom(`PushButton(`id(`propose), _("&Suggestion")))
		)),
		
		// User account information, first version of user password, both versions must match
		`Password(`id(`pw1), _("&Enter a password:"), ""),
		// User account information, second version of user password, retyped to avoid typos
		// This is a label, please use newline if it is longer than 48 characters
		`Password(`id(`pw2), _("Re-enter the password for &verification:"), ""),
		
	        `VStretch(),
		/*`Bottom(*/`PushButton(`id(`details), _("&Details..."))//)
	    ));

	UI(`SetWizardContentsButtons(lookup(dialog_labels, what, ""),
		                     contents,
			             help_text,
			             BackButtonLabel(),
				     NextButtonLabel()));

	symbol ret = UI(`UserInput());
	
	/* TODO change the current_user here */

	return ret;
    }
    
    /**
     * Details of adding/cloning/editing dialog
     * @param term what <TT>`add_user</TT>, <TT>`clone_user</TT> or <TT>`edit_user</TT>
     */
    global define usersEditUserDetails() ``{
	string help_text = "TODO HELP User Details";

	string username = "";
	string fullname = "";
	
	term contents = 
	    `HSquash(`VBox
	    (
	        `VStretch(),
		
		// User account information, forename or first name
		`TextEntry(`id(`forename), _("&Name:"), fullname),

		`VSquash(`HBox
		(
		    // input field for login name
		    `Bottom(`TextEntry( `id(`loginname), _("&User login:"), username )),
		    // push button to generate a login name from first and last name
		    `Bottom(`PushButton(`id(`propose), _("&Suggestion")))
		)),
		
		// User account information, first version of user password, both versions must match
		`Password(`id(`pw1), _("&Enter a password:"), ""),
		// User account information, second version of user password, retyped to avoid typos
		// This is a label, please use newline if it is longer than 48 characters
		`Password(`id(`pw2), _("Re-enter the password for &verification:"), ""),
		
	        `VStretch(),
		/*`Bottom(*/`PushButton(`id(`details), _("&Details..."))//)
	    ));

	UI(`SetWizardContentsButtons(sformat(UI(_("Detailed profile for user %1")), username),
		                     contents,
			             help_text,
			             BackButtonLabel(),
				     OKButtonLabel()));

	symbol ret = UI(`UserInput());
	
	/* TODO change the current_user here */

	// Every time I want to return to the previous dialog
	if (ret == `next)
	    ret = `back;
	
	return ret;
    }
    
} // End
