/**
 * File:
 *  users/ui.ycp
 *
 * Module:
 *  Configuration of the users and groups
 *
 * Summary:
 *  Screens and UI routines for the users module
 *
 * Authors:
 *  Johannes Buchhold <jbuch@suse.de>
 *
 * $Id$
 *
 */

{
    textdomain "users";
    import "Wizard";
    import "Mode";
    import "Report";
    import "UserDefs";
    import "UserSettings";
    import "UserWriteStack";
    import "UserAddDefs";
    import "Progress";
    
    // ===== includes =================================================
    include "ui/common_messages.ycp";
    include "ui/common_popups.ycp";
    include "users/help.ycp";


    
     global define void save_focus( integer table_input, any ret , symbol what) ``{

	integer l_focusline = 0;
	
	if ( what == `group )
	    l_focusline = focusline_group;
	if ( what == `user )
	    l_focusline = focusline_user;
	
	
	if ( is ( table_input, integer ))
	{
	    l_focusline = table_input;
	    if( ret == `delete )
		l_focusline = 0;
	}
	if( l_focusline == nil || l_focusline < 0 )
	{
	    l_focusline = 0;
	}

	if ( what == `group )
	    focusline_group = l_focusline;
	if ( what == `user )
	    focusline_user = l_focusline;
    }

    
    /**
     * Define the switch between Users and Groups administration.
     * This is used in usersUsersDialog and usersGroupsDialog.
     * @param what what can be `users or `groups
     * @return symbol
     */
    global define term rbUsersGroup(symbol what) ``{
	return 
	    `Left(`RadioButtonGroup(`HBox
	    (
	        `RadioButton(`id(`switch_users), `opt(`notify),
			     _("&Users administration"), what == `users),
		`RadioButton(`id(`switch_groups), `opt(`notify),
			     _("&Groups administration"), what == `groups)
	    )));
    }

  
    
    /**
     * The dialog that appears when the [Abort] button is pressed.
     * @return `abort if user really wants to abort
     */
    global define symbol usersReallyAbort() ``{

	boolean ret = true;

	if ( ! Mode::cont )
	{
	    ret =  UI::AnyQuestionPopup (
					 // message box label
					 _("Exit without saving"),
					 // message box text
					 _("All your changes in the setup procedure\nwill be lost if you continue."),
					 // push button 
					 _("&Exit without saving"),
					 // push button 
					 _("&Cancel abort"),
					 `focus_yes
					 );
	}
	else
	{
	    ret = CallFunction(`inst_confirm_abort(`incomplete));
	}

	if( ret ) return `abort;
	else return `back;
    }


    /**
     * Read settings dialog
     * @return symbol `next if success, else `abort
     */
    global define symbol ReadDialog (boolean useUI ) ``{

	// Set help text
	if ( useUI ) Wizard::RestoreHelp ( ReadDialogHelp () );

	
	// A callback function for abort
	block abort = ``{
	    return UI::PollInput () == `abort;
	};
	
	boolean read_aborted = false;
	string caption = _("Initializing user and group configuration");
	integer no_of_steps = 5;

	// We do not set help text here, because it was set outside
	if( useUI )
	    Progress::New ( caption, " ", no_of_steps,
		       [ _("Read the default login settings"),
			 _("Read the default system settings"),
			 _("Read the user settings"),
			 _("Read the group settings"),
			 _("Read the password settings") ],
		       [ _("Reading the default login settings ..."),	
			 _("Reading the default system setttings ..."),
			 _("Reading the user settings ..."),
			 _("Reading the group settings ..."),
			 _("Reading the password settings ..."), 
			 _("Finished") ],
			    "" );


	// read default login settings
	if ( useUI )
	{
	    Progress::NextStage ();
	    read_aborted = eval (abort);
	    if (read_aborted)
	    {
		return !read_aborted;
	    }
	}
	

	if ( ! UserAddDefs::Read() )	
	{
	    Report::Warning (_("Can not read the default login settings!"));
	}

	// read default system settings
	if ( useUI )
	{
	    Progress::NextStage ();
	    read_aborted = eval (abort);
	    if (read_aborted)
	    {
		return !read_aborted;
	    }
	}
	

	if ( ! UserDefs::Read() )
	{
	    Report::Error (_("Can not read the default systems settings!"));
	}

	
	// read user settings
	if( useUI )
	{
	    Progress::NextStage ();

	    read_aborted = eval (abort);
	    if (read_aborted)
	    {	
		return !read_aborted;
	    }
	}
	

	if ( ! UserSettings::ReadPasswdFromDisk( ) )
	{
	    Report::Error (_("Can not read the user settings!"));
	}

	// read group settings
	if( useUI )
	{
	    Progress::NextStep ();
	    read_aborted = eval (abort);
	    if (read_aborted)
	    {
		return !read_aborted;
	    }
	}
	

	if ( ! (UserSettings::ReadGroupFromDisk() &&
	        UserSettings::ReadGshadowFromDisk() ))
	{
	    Report::Error (_("Can not read the group settings!" ));
	}


	// read password settings
	if( useUI )
	{
	    Progress::NextStep ();
	    read_aborted = eval (abort);
	    if (read_aborted)
	    {
		return !read_aborted;
	    }
	}
	

	if ( ! (UserSettings::ReadShadowFromDisk() ))
	{
	    Report::Error (_("Can not read the password settings!" ));
	}
	
	
	// increase the progress to "finish"
	if( useUI ) Progress::NextStage ();

	return ( !read_aborted? `next : `abort );
    }


  
    
    
    /**
     * The first of the two main dialogs -- list of the users.
     * @return symbol
     */
    global define symbol usersUsersDialog() ``{

	user_in_work = $[];

	term contents = 
	    `VBox(rbUsersGroup(`users),

		  `Table(`id(`user_table), `opt(`notify), `header( _("Login"), _("Name"), _("UID"), _("Groups")), UserSettings::UsersRead(`items ,view_all_users )),
		  // not only sysem user 
		  `Left(`CheckBox(`id(`show_all), `opt(`notify), _("Also &view system users"), view_all_users )),
	          `HBox
		  (
		      `PushButton(`id(`new),       _("A&dd")),
		      //  `PushButton(`id(`clone),     _("&Clone")),
		      `PushButton(`id(`edit),      _("&Edit")),
		      `HStretch(),
		      `PushButton(`id(`delete),    _("Dele&te"))
		  )
	    );

	string lastbutton =  UI::FinishButtonLabel() ;
	if( Mode::cont )
	    lastbutton =  UI::NextButtonLabel() ;
	
	Wizard::SetContentsButtons(_("User and group administration"),
		                     contents,
				     usersUsersDialogHelp(),
			             UI::BackButtonLabel(),
				     lastbutton );


	if( focusline_user != 0) 
	    UI::ChangeWidget(`id(`user_table), `CurrentItem, focusline_user );	
			 
	symbol ret = `next;
	repeat
	    {
		ret = UI::UserInput();

		if( ret == `show_all )
		{
		    view_all_users = UI::QueryWidget(`id(`show_all), `Value );
		    UI::ChangeWidget(`id(`user_table), `Items,  UserSettings::UsersRead(`items,view_all_users ));
		    ret = `not_next;
		}
		
		// double click
		if( ret == `user_table )
		    ret = `edit;
		
		if ( ret == `edit  || ret == `clone  || ret == `delete )
		{
		    any user_table_input   = UI::QueryWidget(`id(`user_table), `CurrentItem);
		    if (user_table_input != nil)
		    {
			user_in_work = UserSettings::GetUser( user_table_input ); // Default nil ??
		    }
		    else
		    {
			Report::Message(_("Please select an entry in the user table"));
			ret = `not_next;
		    }
		}
	    } until ( ret != `not_next  );

	save_focus( UI::QueryWidget(`id(`user_table), `CurrentItem), ret, `user);

	return ret;
    }

    
    /**
     * Details of adding/cloning/editing dialog
     * @return symbol
     */
    global define symbol usersEditUserDetails( ) ``{

	//load the current usersettings from user_in_work
	symbol what           = lookup( user_in_work , "what"     , `nix );
	string username       = lookup( user_in_work , "username" , ""   );
        string fullname       = lookup( user_in_work , "fullname" , ""   ); 
	string home           = lookup( user_in_work , "home"     , ""   );
	string shell          = lookup( user_in_work , "shell"    , ""   );
	string grouplist      = lookup( user_in_work , "grouplist", ""   );
	list  list_grouplist  = UserSettings::GroupString2groupList (lookup( user_in_work , "grouplist", ""   ));
	integer uid           = lookup( user_in_work , "uid"      , UserDefs::max_uid );
	integer old_uid       = 0;
	integer gid           = lookup( user_in_work, "gid"       , UserDefs::max_uid );
	fullname              = username + ", " + fullname;

	list available_shells = UserAddDefs::GetAllShells(`items);
	list available_groups = [];
	

	// fill the list available_groups and set the user default group true
	foreach ( `key, `group,  UserSettings::current_groups, ``{

	    if ( lookup(group ,"todo", "" ) != `delete )
	    {
		if ( key == gid )
		{
		    available_groups = add( available_groups ,`item( `id(lookup( group , "groupname" , "" )),
									 lookup( group , "groupname" , "" ) , true));
		}
		else
		{
		    available_groups = add( available_groups , `item( `id(lookup( group , "groupname" , "" )),
									  lookup( group , "groupname" , "" )));
		}
	    }
	});

	term edit_defaultgroup = `ComboBox(`id(`defaultgroup), `opt(`hstretch), _("Default &group"), available_groups );
	term edit_shell        = `ComboBox(`id(`shell       ), `opt(`hstretch), _("Login &shell"), available_shells );
	
	term contents =
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(1),
				 // User account information, forename or first name
				 `TextEntry(`id(`fullname), _("&Detaild profile for user:"), fullname),
				 `VSpacing(1),
				 `HBox(
				       `VBox(
					     `Top(`TextEntry( `id(`uid), _("User &ID (uid)"), sformat("%1",uid ))),
					     `Top(`TextEntry( `id(`home), _("&Home directory"), home )),
					     `Top(edit_shell),
					     `Top(edit_defaultgroup),
					     `VStretch()
					     ),
				       `HSpacing(2),
				       `Top(`MultiSelectionBox( `id(`grouplist),_("Additional group &membership")  , list_grouplist))
				       ),
				 `VSpacing(1)
				 ),
			   `HSpacing(1)
			   );

	Wizard::SetContentsButtons(_("Add/Edit User Properties - Details"),
		                     contents,
				     usersEditUserDetailsHelp(),
			             UI::BackButtonLabel(),
				     UI::NextButtonLabel());

	//Modify the dialog
	UI::ChangeWidget(`id(`fullname), `Enabled, false );
	UI::ChangeWidget(`id(`shell),    `Value,   shell );
	if ( what == `edit_user ) UI::ChangeWidget(`id(`uid), `Enabled, false );


	// user input
	symbol ret = `next;
	repeat
	    {
		ret = UI::UserInput();
		if ( ret == `next )
		{
		    string  new_home          = UI::QueryWidget(`id(`home),        `Value);
		    string  new_shell         = UI::QueryWidget(`id(`shell),       `Value);
		    string  new_uid           = UI::QueryWidget(`id(`uid),         `Value);
		    string  new_defaultgroup  = UI::QueryWidget(`id(`defaultgroup),`Value);
		    list_grouplist            = UI::QueryWidget(`id(`grouplist),   `SelectedItems );
		    boolean input_ok          = true;
		    integer new_i_uid         = tointeger( new_uid );
		    string new_grouplist      = mergestring( list_grouplist, ",");

		    // check the uid
		    if ( (what == `add_user) && (new_uid != sformat("%1",uid)) )
		    {
			if( !( new_i_uid >= 0  && new_i_uid <= UserDefs::max_uid )  ||
			    nil != findfirstnotof( new_uid ,  UserDefs::valid_id_chars ) )
			{
			    string error = sformat(_("The selected User Id is not allowed.
Please select a valid integer between 0 and %1"),  UserDefs::max_uid );
			    Report::Error( error );
			    UI::SetFocus(`id(`uid));
			    continue;
			}
			if( new_i_uid <=  UserDefs::max_system_uid )
			{
			    // tell the max_system_uid
			    string error = sformat(_("The selected User Id is a system Id,
because the Id is smaller than %1. \nDo you really want to create a new system user"),  UserDefs::max_system_uid );
			    if( ! UI::YesNoPopup( error ))
			    {
				UI::SetFocus(`id(`uid));
				continue;
			    }
			}

			if(  haskey( UserSettings::current_users ,  new_i_uid ) && ( uid != new_i_uid ) )
			{
			    Report::Error(_("The inputted User Id is reserved.
Please select a another User Id"));
			    UI::SetFocus(`id(`uid));
			    continue;
			}
		    }

		    // check the defaultgroup ( replace by filter!! )
		    foreach ( `key, `group,  UserSettings::current_groups, ``{
			if( lookup( group, "groupname", "") == new_defaultgroup )
			{
			    gid = lookup(group, "gid",  UserDefs::max_gid);
			}
		    });

		    // check the homedirectory
		    if ( home != new_home || what == `add_user )
		    {
			if( (nil != findfirstnotof( new_home, UserDefs::valid_home_chars )) ||
			    (  0 != findfirstof( new_home, "/")   ))
			{
			    //TODO FIXME - ADD "-_" to message - not start with "-"
			    Report::Error(_("The home directory  may only contain the following characters:
a..zA..Z0..9/
Please try again."));
			    UI::SetFocus(`id(`home));
			    continue;
			}
			if( Mode::test ) y2milestone("newhome: %1,  org_home: %2", new_home, user_in_work["org_home"]:""  );

			if ( what == `edit_user && ( new_home != user_in_work["org_home"]:"" )
			     || what == `add_user )

			{
			    if (Mode::test )  y2milestone("homelist %1",   UserSettings::UsersRead(`homelist,view_all_users )  );

			    /* TODO new popup for existing dir */
			    if (contains (UserSettings::UsersRead (`homelist, view_all_users), new_home))
			    {
				Report::Error(_("The home directory is used from another user.
Please try again."));
				UI::SetFocus(`id(`home));
				continue;
			    }
			    if (SCR::Read(.target.size, new_home ) !=-1)
			    {
				if (! UI::YesNoPopup(_("The home directory you selected already exists.
Do you want to use it and change it's owner?.")))
				{
				    UI::SetFocus(`id(`home));
				    continue;
				}
																	
//				UserWriteStack::AddTodo(sformat("/bin/chown -R %1:%2 %3", username, gid, new_home),
//					`chown_home,
//					_("Can't execute /usr/sbin/userdel.local"));
//				what = `add_user_nodir;

			    }
			    /*
			    if(  SCR::Read(.target.size, new_home ) !=-1 )
			    {
				 WarningPopup ???
			    }
			    */
			}
		    }

		    // chech the grouplist
		    if( new_grouplist != grouplist  )
		    {
			if( nil == findfirstnotof( new_grouplist ,  UserDefs::valid_grouplist_chars ) )
			{
			    // remove last,""
			    list new_groups  = splitstring(new_grouplist, "," );
			    new_groups   = filter(`k, new_groups, ``( k != ""));

			    //if two entries for one group in new_groups delete one
			    list tmp_new_groups  = new_groups;
			    list double_entries = [];
			    foreach( `new_group, tmp_new_groups , ``{
			    if ( (size( filter(`k, tmp_new_groups , ``( k == new_group ))) > 1 ) &&
				 ( ! contains( double_entries, new_group) ))
			    {
				double_entries =  add( double_entries ,  new_group );
				new_groups = filter(`k, new_groups , ``( k != new_group ));
				new_groups = add( new_groups , new_group );
			    }
			});
			new_grouplist  = mergestring( new_groups ,",");
			    boolean input_ok = true;
			    foreach( `new_group, new_groups , ``{
				if( input_ok )
				{
				    boolean found = false;
				    foreach(`key, `exist_group, UserSettings::current_groups, ``{
					if( lookup( exist_group, "groupname", "") == new_group )
					{
					    found = true;
					}
				    });
				    if ( found == false )
				    {
					Report::Error(_("You can only assign the user
groups that really exists.
Please try again."));
					UI::SetFocus(`id(`grouplist));
					input_ok = false;
				    }
				}
			    });
			    if( ! input_ok ) continue;
			}
			else
			{
			    Report::Error(_("The groupfield may contain only
letters and digits.
Please try again."));
			    UI::SetFocus(`id(`grouplist));
			    continue;
			}
		    }

		    // update user_in_work
		    user_in_work = add( user_in_work, "home"      , new_home );
		    user_in_work = add( user_in_work, "shell"     , new_shell);
		    user_in_work = add( user_in_work, "gid"       , gid      );
		    user_in_work = add( user_in_work, "uid"       , new_i_uid);
		    user_in_work = add( user_in_work, "grouplist" , new_grouplist);
		}
	    } until ( ret == `next || ret == `abort  || ret == `back || ret == `cancel );

	if ( ret == `next ) ret = what;

	if( Mode::test ) y2milestone("user in work  %1: ",user_in_work);
	return ret;
    }



    /**
     * Details of adding/cloning/editing dialog
     * @return symbol
     */
    global define symbol usersEditUserPassword() ``{

	/************************************************
         *  TODO 
         * 
         */
	
	string username       = user_in_work["username"]:"";
	map shadow            = user_in_work["shadow"]:$[];

	y2milestone(sformat("shadow %1", shadow));

/*
	    `Left (`Label ("Days since the account was locked")),
			       `Left (`CheckBox (`id ("id_30"), "Lock account", false)),
*/
	
	term contents = `HBox (`HSpacing (3),
			       `VBox (
				      `VStretch(),
				      `Top(`Left (`Label (_("Date of the last password change ") + shadow["lstchg"]:"" ))),
				      `VSpacing (1),
				      /*
				      `Top(`HBox (`IntField (`id ("id_129"), "Days until password expires", 1, 9, 4),
					     `HSpacing (2),
					     `TextEntry (`id ("id_237"), "Date on witch password expires", ""))),
				      */
				      `VSpacing (1),
				       `HSquash(`VBox(
						      `IntField (`id ("warn"), _("How many day's warning before password expires?"), -1, 99999,
								 shadow["warn"]:""),
						      `VSpacing (0.5),
						      `IntField (`id ("inact"), "How many days after password expires is the login usable", -1, 99999,
								 shadow["inact"]:""),
						      `VSpacing (0.5),
						      `IntField (`id ("max"), "Maximum number of days for the same password", -1, 99999,
								 shadow["max"]:""),
						      `VSpacing (0.5),
						      `IntField (`id ("min"), "Minimum number of days for the same password", -1, 99999,
								 shadow["min"]:"")
						      )),
				      `VStretch ()),
			       `HSpacing (3));
	   
	Wizard::SetContentsButtons(_("Password settings for user ") + username +":",
		                     contents,
				     usersEditUserPasswordHelp(),
			             UI::BackButtonLabel(),
				     UI::NextButtonLabel());

	// user input
	symbol ret = `next;
	repeat
	    {
		ret = UI::UserInput();
		
		if( ret == `next )
		{
		    foreach(`autosymbol, UserSettings::auto_shadow_symbols, ``{
			shadow[autosymbol] =  UI::QueryWidget(`id(autosymbol), `Value);
		    });
		    user_in_work["shadow"] = shadow;

		}
	
	    } until ( ret == `next || ret == `abort  || ret == `back || ret == `cancel );
	
	if ( ret == `next ) ret = lookup( user_in_work , "what"     , `back ); 

	return ret;
    }


    
    /**
     * Propose a username.
     * @param forename forename
     * @param surname surname
     * @return string
     */
    global define string usersProposeUsername( string forename, string surname ) ``{

	string  username             = "";
	string  default_login_name   = "lxuser";
	integer default_login_count  = 0;
	integer part_len             = 3;
	integer login_len            = part_len * 2;
	string  test_login_name      = default_login_name;
	
	while (true)
	{
	    if (  contains( UserSettings::UsersRead(`usernamelist, view_all_users ), test_login_name ) )
	    {	
		default_login_count = default_login_count + 1;
		test_login_name  = default_login_name  + sformat("%1",default_login_count);
	    }
	    else
	    {
		default_login_name = test_login_name;
		break;
	    }   	    
	}

	
	string f_name = filterchars(tolower(forename), UserDefs::valid_logname_chars);
	integer f_len = size( f_name );

	string s_name = filterchars(tolower(surname), UserDefs::valid_logname_chars);
	integer s_len = size( s_name );
		    
	if ( f_len == 0 && s_len == 0 )	// both are missing
	{	
	    username = default_login_name;	// default login
	}
	else					// at least one is given
	{
	    if ( f_len >= part_len )
	    {
		if ( s_len >= part_len )	        // forename and surname long enough
		{
		    f_len = part_len;		// take part_len chars from each
		    s_len = part_len;
		}
		else				// surname shorter than 3 chars
		{
		    f_len = login_len - s_len;	// fill up with forename
		}
	    }
	    else				// forename shorter than 3 chars
	    {
		s_len = login_len - f_len;	// fill up with surname
	    }
			    
	    // build login name
	    username = substring( f_name, 0, f_len ) + substring( s_name, 0, s_len );
	    if (size (username) < 2) username = default_login_name;
	    else {
		string firstchar = substring(username, 0, 1);
		if (firstchar < "a" || firstchar > "z")
		    username = default_login_name;
	    }
	}
	return username;
    }
    

    /**
     * Split fullname in forename and surname.
     * @param what `surname or `forename
     * @param fullname fullname
     * @param uid uid
     * @return string
     */
    global define string usersSplitFullName( symbol what, string fullname, integer uid) ``{
	
	if( fullname == nil )
	    fullname = "";
	
	list    strs    = splitstring(fullname , " ");
	integer i       = 1;
	string surname  = "";
	string forename = "";
	
	if( uid <=  UserDefs::max_system_uid )
	{
	    if ( what == `surname  ) return fullname;
	    if ( what == `forename ) return "";
	}
	
	foreach( `str, strs, ``{
	    
	    if ( i < size( strs) )
	    {
		if( forename == "" ) forename = str;
		else forename = forename + " " + str;
	    }
	    else  surname = str;
	    i = i + 1;
	});
	if ( what == `surname  ) return surname;
	if ( what == `forename ) return forename;

  }

    /**
     * Function that adds or edits a user.
     * @param what `add_user or `edit_user
     * @return symbol
     */
    global define symbol usersEditUser(symbol what) ``{
	map dialog_labels = $[
	    `add_user:   _("Add a new user"),
	    `clone_user: _("Add a new user by cloning user "),
	    `edit_user:  _("Edit an existing user")
	];

	boolean create_home    = lookup (user_in_work, "create_home", true);
	string  username       = lookup( user_in_work, "username", "");
	string  fullname       = lookup( user_in_work, "fullname", "");
	integer gid            = lookup( user_in_work, "gid"     , UserAddDefs::GetDefaultGid());
	string  home           = lookup( user_in_work, "home"    , UserAddDefs::GetDefaultHome());
	string  shell          = lookup( user_in_work, "shell"   , UserAddDefs::GetDefaultShell());
	integer uid            = lookup( user_in_work, "uid"     , UserDefs::max_uid );
	string  surname        = lookup( user_in_work, "surname" , "empty" );
	string  forename       = lookup( user_in_work, "forename", "empty" );
	string  password       = lookup( user_in_work, "password", "");
	string  grouplist      = lookup( user_in_work, "grouplist", "empty");
	if ( grouplist == "empty" && what == `edit_user)  grouplist = UserSettings::FindGroupsBelongUser(username);
	if ( grouplist == "empty" && what == `add_user )  grouplist = "dialout,uucp,video,audio";
	if ( surname   == "empty" ) surname  =  usersSplitFullName(`surname,  fullname, uid);
	if ( forename  == "empty" ) forename =  usersSplitFullName(`forename, fullname, uid);
	if ( uid ==  UserDefs::max_uid )  uid = UserSettings::NextFreeUid();

	map shadow	       = $[];
	if (user_in_work["shadow"]:$[] == $[] && what == `add_user )
	{
	    shadow = UserDefs::GetDefaultShadow();
	}
	else
	{
	    foreach( `key, `value, user_in_work["shadow"]:$[], ``{
		shadow[key] = value;
	    });
	}
	
	term detailsmorebox = 	`HBox(
				      `PushButton(`id(`details), _("&Details...")),
				      `VStretch(),
				      `PushButton(`id(`passwordsettings), _("&Password settings")),
				      `VStretch()
				      );
	
	// running in inst-sys and first mask to a user
	if( Mode::cont &&  start_dialog == "user_add" )
	{
	    detailsmorebox = add(detailsmorebox, `PushButton(`id(`additional), _("Additional users/&groups")));
	}
	    
	term contents = 
	    `HSquash(`VBox(
			   `VStretch(),
			   `VBox(
				 `TextEntry(`id(`forename), _("&First name:"), forename),
				 `TextEntry(`id(`surname),  _("&Last name:"),  surname )
				 ),
			   `VSquash(`HBox
				    (
				     // input field for login name
				     `Bottom(`TextEntry( `id(`username), _("&User login:"), username )),
				     // push button to generate a login name from first and last name
				     `Bottom(`PushButton(`id(`propose), _("&Suggestion")))
				     )),
			   // User account information, first version of user password, both versions must match
			   `Password(`id(`pw1), _("&Enter a password:"), ""),
			   // User account information, second version of user password, retyped to avoid typos
			   // This is a label, please use newline if it is longer than 48 characters
			   `Password(`id(`pw2), _("Re-enter the password for &verification:"), ""),
			   `VStretch(),
			   detailsmorebox
			   ));

	Wizard::SetContentsButtons(lookup(dialog_labels, what, ""),
		                     contents,
			             usersEditUserHelp(),
			             UI::BackButtonLabel(),
				     UI::NextButtonLabel());
	UI::ChangeWidget (`id (`username), `ValidChars, UserDefs::valid_logname_chars);
	// Modify the dialog
	//if( what == `clone_user )      UI::ChangeWidget(`id(`next) , `Label, _("&Clone"));
	if( what == `add_user &&( ! Mode::cont) )  UI::ChangeWidget(`id(`next) , `Label, _("&Create"));


	if( what == `add_user ) UI::SetFocus(`id(`forename));


	if( uid <=  UserDefs::max_system_uid && what == `edit_user )
	{
	    UI::ChangeWidget(`id(`propose), `Enabled, false );
	    UI::ChangeWidget(`id(`forename),`Enabled, false );
	}
	if( password != "")
	{
	    UI::ChangeWidget(`id(`pw1), `Value ,UserDefs::default_pw);
	    UI::ChangeWidget(`id(`pw2), `Value, UserDefs::default_pw);
	}

	symbol ret = `next;	
	repeat
	    {
		ret = UI::UserInput();
		
		// generate a login name from first and last name
		if (ret == `propose  && ( !(what == `edit_user && uid <=  UserDefs::max_system_uid) ) )
		{
		    string forename = UI::QueryWidget(`id(`forename), `Value);
		    string surname  = UI::QueryWidget(`id(`surname), `Value);
		    string username = usersProposeUsername( forename, surname );
		    UI::ChangeWidget(`id(`username), `Value, username);
		}


		// only in continue mode
		if( ret == `additional )
		{

		    if( ! UI::YesNoPopup(_("Do you want to create one user first?")) )
		    {
			ret = `nosave;
		    }
		}

		boolean details =  ( ret == `details || ret == `passwordsettings );

		// check the settings
		if (( ! Mode::cont && ( ret == `next || details ) )
		 || (   Mode::cont && ( details || ret ==  ret == `additional || ret == `next )))
		{
		    
		    string pw1   = UI::QueryWidget(`id(`pw1),      `Value);
		    string pw2   = UI::QueryWidget(`id(`pw2),      `Value);
		    username     = UI::QueryWidget(`id(`username), `Value);
		    forename     = UI::QueryWidget(`id(`forename), `Value);
		    surname      = UI::QueryWidget(`id(`surname ), `Value);

		    if( forename != "" )
		    {
			if( surname != "")
			{
			    fullname = forename + " " + surname;
			}
			else
			{
			    fullname = forename;
			}
		    }
		    else fullname = surname;
		

		    if ( username == "" )
		    {
			// The user login field is empty, this is allowed if the
			// system is part of a network with NIS user management.
			// Ask the user about this in a Yes/No popup
			// The first string is the title of the popup.

			if( Mode::cont && !details && ret != `additional && start_dialog == "user_add" )
			{
			    if (  UI::YesNoHeadlinePopup(_("Empty user login"), _("Leaving the user name empty only makes sense
in a network environment with a NIS server.

Is this system a network client?
")))
			    {
				start_sequencer_again = false;
				ret = `nextmodule;
				break;	
			    }
			    UI::SetFocus(`id(`username));
			    continue;
			}
			else
			{
			    // There is a check whether the information from the UI is
			    // correct and complete.  The username is empty (no user
			    //  input).
			    Report::Error(_("You didn't enter a username.
Please try again.
"));
			    UI::SetFocus(`id(`username));
			    continue;
			}
		    }

		    if  (  ( size( username ) < 2 || size( username ) > 32 ) )
		    {

			// There is a check whether the information from the UI is
			// correct and complete.  The username must have a size
			// between 2 and 32 characters.
			Report::Error(_("The username must be between 2 and 32 characters in length.
Please try again.
"));
			UI::SetFocus(`id(`username));
			continue;
		    }
		    
		    string firstchar = substring(username, 0, 1);



		    if ( ( ! ( (firstchar >= "a" && firstchar <= "z" ) || firstchar == "_"  ) ||
                           nil != findfirstnotof( username, UserDefs::valid_logname_chars ) ) )
		    {
			
			// There is a check whether the information from the UI is
			// correct and complete.  The login name may contain only
			// certain characters and must begin with a letter.
			Report::Error(_("The user login may contain only
lower case letters, digits, \"-\" and \"_\"
and must begin with a letter or \"_\".
Please try again.
"));
			UI::SetFocus(`id(`username));
			continue;
		    }

		    // check login against passwd contents
		    if ( (username != lookup( user_in_work , "username", "")) &&
			 contains( UserSettings::UsersRead(`usernamelist, view_all_users ), username ) )
		    {
			
			// Tell the user that the login he entered conflicts with
			// predefined logins in the passwd file.
			Report::Error(_("There is a conflict between the entered
login name and a predefined username.

Please try another one.
"));
			UI::SetFocus(`id(`username));
			continue;
		    }

		    if (  pw1 != pw2 )
		    {
			
			//There is a check whether the information from the UI is
			// correct and complete.  The two user password information
			// do not match
			Report::Error(_("The first and the second version
of the password are different.
Please try again."));
			password = "";
			// Invalidate any old password
			
			// clear password inputfields in this case
			UI::ChangeWidget(`id(`pw1), `Value, "");
			UI::ChangeWidget(`id(`pw2), `Value, "");

			UI::SetFocus(`id(`pw1));
			continue;
		    }

		    // Use the old password (if any) if no passwords were entered.
		    // only check pw1 here, its identical with pw2 as checked before
		    if ( (pw1 !=  UserDefs::default_pw) && (pw2 != UserDefs::default_pw ))
		    {
			if ( pw1 == "" )
			{
			    // There is a check whether the information from the
			    // UI is correct and complete.  The first user password
			    // information is empty (no user input)
			    Report::Error(_("You didn't enter a password.\nPlease try again."));
			    password = "";

			    // clear password inputfields in this case
			    UI::ChangeWidget(`id(`pw1), `Value, "");
			    UI::ChangeWidget(`id(`pw2), `Value, "");

			    UI::SetFocus(`id(`pw1));
			    continue;
			}
			if (size (pw1) < UserDefs::min_length_pas)
			{

			    // There is a check whether the information from the
			    // UI is correct and complete.  The user password
			    // information must have a minimal size - 5 characters.
			    Report::Error(sformat(_("The password must have between %1 and %2 characters.\nPlease try again."),
						       UserDefs::min_length_pas,
						       UserDefs::max_length_pas));

			    password = "";

			    // clear password inputfields in this case
			    UI::ChangeWidget(`id(`pw1), `Value, "");
			    UI::ChangeWidget(`id(`pw2), `Value, "");
			    UI::SetFocus(`id(`pw1));
			    continue;
			}
			if (size(pw1) >  UserDefs::max_length_pas)
			{
			    if (!UI::YesNoPopup (sformat(_("The password is longer then %1 characters. It will be truncated to %1 characters."),
						UserDefs::max_length_pas)))
			    {
				password = "";
				UI::ChangeWidget(`id(`pw1), `Value, "");
				UI::ChangeWidget(`id(`pw2), `Value, "");
				UI::SetFocus(`id(`pw1));
				continue;
			    }
			}
			if ( size(pw1) >=  UserDefs::min_length_pas )

			{
			    if ( nil != findfirstnotof( pw1, UserDefs::valid_password_chars ) )
			    {
				
				// There is a check whether the information from the
				// UI is correct and complete.  The user password may
				// contain only certain characters
				Report::Error(_("The password may only contain the following characters:
0..9, a..z, A..Z, and any of \"#* ,.;:._-+!$%&/|\?{[()]}\".
Please try again."));
				password = "";
				
				// clear password inputfields in this case
				UI::ChangeWidget(`id(`pw1), `Value, "");
				UI::ChangeWidget(`id(`pw2), `Value, "");
				UI::SetFocus(`id(`pw1));
				continue;
			    }
			}

			if( UserDefs::pam )

			{
			    password = cryptmd5(pw1);
			}
			else
			{
			    password = crypt (pw1);
			}
		    }

		    // bild default home dir
		    // TODO Fixme
		    if ( what == `add_user && home == UserAddDefs::GetDefaultHome() )

		    {
			home = home + username;
		    }

		    if( home != user_in_work["org_home"]:"" )
		    {
			// TODO new popup for existing dir
			if( (contains(UserSettings::UsersRead(`homelist, view_all_users ), home ) && ! details ))

			{
			    Report::Error(_("The default home directory is used from another user.
Please press button Details and edit home directory."));
			    continue;
			}
			if (SCR::Read(.target.size, home ) != -1)
			{

                            if (! UI::YesNoPopup(_("The home directory you selected already exists.
Do you want to use it and change it's owner?.")))
                            {
                                UI::SetFocus(`id(`home));
                                continue;
                            }

//                            UserWriteStack::AddTodo(sformat("/bin/chown -R %1:%2 %3", username, gid, new_home),
  //                                  `chown_home,
    //                                _("Can't execute /usr/sbin/userdel.local"));
			    create_home = false;
//                            what = `add_user_nodir;
			}

																	
			/*
			  if( SCR::Read(.target.size, home ) != -1  )
			  {
			  // WarningPopup ??
			  }
			*/
		    }


		    if ( what == `add_user ) user_in_work["org_home"] = home;
		    if(Mode::test ) y2milestone(" user in work : %1", user_in_work );

		    user_in_work = $[
				     "what"        :  what ,
				     "fullname"    :  fullname,
				     "gid"         :  gid,
				     "home"        :  home,
				     "password"    :  password,
				     "shell"       :  shell,
				     "uid"         :  uid,
				     "username"    :  username,
				     "grouplist"   :  grouplist,
				     "forename"    :  forename,
				     "surname"     :  surname,
				     "org_home"    :  user_in_work["org_home"]:"",
				     "shadow"      :  shadow,
				     "create_home" :  create_home

		    ];

		}
	    } until ( ret == `next || details || ret == `abort  || ret == `back || ret == `cancel || ret == `additional || ret == `nosave );


	
	
	// only in inst-sys
	// create more users and groups
	// leave sequencer and start it again with new start_dialog
	if( ret == `additional ||  ret == `nosave )
	{
	    start_sequencer_again = true;

	    if ( ret == `additional ) ret = `next;
	}
	else start_sequencer_again = false;
	
	return ret;
    }


    
    /**
     * Delete the user saved in user_in_work from current_users and
     * add a entry with a shell delete command to the map write_to_system_stack.
     * @return symbol
     */
    global define symbol usersDeleteUser() ``{

	boolean delete        = true;
	boolean delete_home   = false;
	string username       = lookup( user_in_work, "username", "");
	string home           = lookup( user_in_work, "home", "");
	integer uid = lookup (user_in_work, "uid", UserDefs::max_uid);
	
	// if the user has log on system
	list proc  = SCR::Read(.run.procfiles);

        // the user that should deleted is present
	if( size( filter(`k, proc, ``( (username == lookup(k, "username", "")) &&
				       (UserSettings::GroupIdToName(lookup( user_in_work , "gid", 100)) == lookup( k, "groupname", ""))))) > 0 )
	{
	    Report::Error(_("You can not delete this user, because the user is present.
Please log off the user first."));
	    delete = false;
	}
	
	// if the user want to delete a system user
	if ( lookup(user_in_work , "uid", nil) <=  UserDefs::max_system_uid )
	{
	    if(! UI::YesNoHeadlinePopup(_("The marked user is a system user."), _("Do you really want to delete this user?")))
	    {
		delete = false;
	    }
	}
	else
	{
	    if( lookup( user_in_work, "exist", true ) && home != "")
	    {
		term contents = `HBox(
				      `HSpacing(3),
				      `VBox(`VSpacing(1),
					    `Left(`Heading(sformat(_("Delete the user %1"), username ))),
					    `VSpacing(0.5),
					    `Left(`CheckBox(`id(`delete_home), sformat(_("delete &home directory
%1"),home ) )),
					    `VSpacing(1),
					    `HBox(
						  `Bottom(`PushButton(`id(`ok),	OKButtonLabel()  )),
						  `Bottom(`PushButton(`id(`cancel),UI(`CancelButtonLabel())))
						  )
					    ),
					    `HSpacing(3)
				      );

		UI::OpenDialog(`opt( `decorated ), contents );
		symbol ret  = UI::UserInput();
		delete_home = UI::QueryWidget(`id(`delete_home), `Value);

		UI::CloseDialog();
	    
		if( ret == `cancel )
		{
		    delete = false;
		}
	    }
	    else
	    {
		if( ! UI::YesNoPopup(sformat(_("
Do you really want to delete the user %1?
"), username )))
		{
		    delete = false;
		}
	    }
	}

	if(! delete )
	{
	    save_focus( lookup(user_in_work ,"uid", 0), `nodelet, `user);
	    user_in_work = $[];
	    return `next;
	}


	// delete the user from the map current_users
	UserSettings::DelUser( user_in_work["uid"]:nil );

	if (  SCR::Read(.target.size,"/usr/sbin/userdel.local") != -1 )
	{
	    UserWriteStack::AddTodo(("/usr/sbin/userdel.local " + username),
			 `del_user_local,
			 _("Can't execute /usr/sbin/userdel.local"), `user, uid);
	}

	UserWriteStack::AddTodo("/usr/sbin/userdel " + username ,
		     `del_user,
		     sformat(_("Can't delete the user %1"), username), `user, uid);

        //build a shell delete command and save it to write_to_system_stack
	if(! lookup( user_in_work, "exist", true ))
	{
	    if( lookup( user_in_work , "home", "" ) != "")
		UserWriteStack::AddTodo(sformat ("/bin/rm -rf %1", lookup(user_in_work, "home", "")), `del_user_home,
			sformat (_("Can't delete directory %1"), lookup(user_in_work, "home", "")), `user, uid);
//		usersAddRmDir( lookup( user_in_work , "home", "" ));
	}
	else
	{
	  if( delete_home )
	  {
		UserWriteStack::AddTodo(sformat ("test -d %1 && /bin/rm -rf %1", lookup(user_in_work, "home", "")), `del_user_home,
                        sformat (_("Can't delete directory %1"), lookup(user_in_work, "home", "")), `user, uid);
//	      usersAddRmDir( lookup( user_in_work, "home", "" ));
	      if( Mode::test ) y2milestone("delete home");
	  }
	}

	UserSettings::DelUserFromAllGroups( username );

	user_in_work = $[];
	return `next;
    }



    /**
     * The second of the two main dialogs.
     * @return symbol
     */
    global define symbol usersGroupsDialog() ``{

	group_in_work = $[];

	term contents =
	    `VBox(rbUsersGroup(`groups),
		  `Table(`id(`group_table ), `opt(`notify) , `header(_("Group name"), _("Group ID"), _("Group members")),
		         UserSettings::GroupsRead(`items, view_all_groups) ),
		  `Left(`CheckBox(`id(`show_all), `opt(`notify), _("Also &view system groups"), view_all_groups )),
		  
	          `HBox
		  (
		      `PushButton(`id(`new),   _("A&dd")),
		      // `PushButton(`id(`clone), _("&Clone")),
		      `PushButton(`id(`edit),  _("&Edit")),
		      `HStretch(),
		      `PushButton(`id(`delete), _("Dele&te"))
		  )
	    );

	string lastbutton =  UI::FinishButtonLabel() ;
	if( Mode::cont )
	    lastbutton =  UI::NextButtonLabel() ;
	
	Wizard::SetContentsButtons(_("User and group administration"),
		                     contents,
			             usersGroupsDialogHelp(),
			             UI::BackButtonLabel(),
				     lastbutton );

	if( focusline_group != 0 )
	    UI::ChangeWidget(`id(`group_table), `CurrentItem, focusline_group );
	
	// save marked table entry to group_in_work
	symbol ret = `next;
	repeat
	    {
		ret = UI::UserInput();

		if( ret == `show_all )
		{
		    view_all_groups = UI::QueryWidget(`id(`show_all), `Value );
		    UI::ChangeWidget(`id(`group_table), `Items,  UserSettings::GroupsRead(`items, view_all_groups ));
		    ret = `not_next;
		}
		

		
		// double click
		if( ret == `group_table )
		    ret = `edit;
			
		if ( ret == `edit  || ret == `clone  || ret == `delete )
		{
		    integer group_table_input = UI( `QueryWidget(`id(`group_table), `CurrentItem) );
		    if( group_table_input != nil ) group_in_work = UserSettings::GetGroup( group_table_input );
		    else
		    {
			Report::Error(_("Please select an entry in the group table"));
			ret = `not_next;
		    }
		   
		}

	    } until ( ret != `not_next  );
	
	save_focus( UI::QueryWidget(`id(`group_table), `CurrentItem), ret, `group);
	return ret;
    }



    /**
     * Details of adding/cloning/editing dialog
     * @param what `add_user, `clone_user or `edit_user
     * @return symbol
     */
    global define symbol usersEditGroup(symbol what ) ``{

	map dialog_labels = $[
			      `add_group:   _("Add a new group"),
			      `clone_group: _("Add a new group by cloning group "),
			      `edit_group:  _("Edit an existing group")
	];

    
	// load group saved in group_in_work
	string  groupname     = lookup( group_in_work, "groupname", "");
	string  password      = lookup( group_in_work, "password" , "x");
	integer gid           = lookup( group_in_work, "gid",  UserDefs::max_gid );
	string  userlist      = UserSettings::FindUsersBelongGroup(gid, `string);
	list  list_userlist   = UserSettings::FindUsersBelongGroup(gid, `list);
	if( gid ==  UserDefs::max_gid )   gid = UserSettings::NextFreeGid();

	
	// make dialog
	term contents =
	    `HBox(
		  `Left(`VBox(    
			      `VSpacing(1),	
			      `Top(`TextEntry( `id(`groupname), _("&Group name"), groupname )),
			      `Top(`TextEntry( `id(`gid), _("Group &id (gid)"), sformat("%1", gid) )),
			      `VSpacing(1),
			      // User account information, first version of user password, both versions must match
			      `Bottom(`Password(`id(`pw1), _("&Enter a password:"), "")),
			      // User account information, second version of user password, retyped to avoid typos
			      // This is a label, please use newline if it is longer than 48 characters
			      //`Bottom(`Password(`id(`pw2), _("Re-enter the password for &verification:"),  "")),
			      `Bottom(`Password(`id(`pw2), _("Re-enter the &password:"),  "")),
			      `VSpacing(1)
			      )),
		  `HSpacing(2),
		  `HStretch(),
		  `VBox(
			`VSpacing(1),	
			`MultiSelectionBox( `id(`userlist), _("&Members of this group") , list_userlist),
			`VSpacing(1)
			)
		  );
			   
	
	
	Wizard::SetContentsButtons(lookup(dialog_labels, what, ""),
		                     contents,
			             usersEditGroupHelp(),
			             UI::BackButtonLabel(),
				     UI::NextButtonLabel());

	


	//if( what == `clone_group )       UI::ChangeWidget(`id(`next) , `Label, _("&Clone"));
	if( what == `add_group && ! Mode::cont)  UI::ChangeWidget(`id(`next) , `Label, _("&Create"));
	//else   if( what == `edit_group)  UI::ChangeWidget(`id(`next) , `Label, _("&Ok"));

	if( what == `add_group ) UI::SetFocus(`id(`groupname));
	
	if( what == `edit_group  )
	{
	    if( password != "x"  )
	    {
		UI::ChangeWidget(`id(`pw1), `Value, UserDefs::default_pw);
		UI::ChangeWidget(`id(`pw2), `Value, UserDefs::default_pw);
	    }
	}


	symbol ret = `next;
	repeat
	    {
		ret = UI::UserInput();

		
		if ( ret == `next  )
		{
		    string pw1            = UI::QueryWidget(`id(`pw1),       `Value);
		    string pw2            = UI::QueryWidget(`id(`pw2),       `Value);
		    string new_groupname  = UI::QueryWidget(`id(`groupname), `Value);
		    string new_gid        = UI::QueryWidget(`id(`gid),       `Value);
		    list_userlist         = UI::QueryWidget(`id(`userlist),  `SelectedItems );  
		    string new_userlist   = mergestring( list_userlist, "," );

		    
		   
		    
		    if ( new_groupname == "" )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The new_groupname is empty (no group
			//  input).
			Report::Error(_("You didn't enter a groupname.
Please try again.
")) ;	
			UI::SetFocus(`id(`groupname)) ;
                        continue;
		    }	

		    
		    if  (  ( size( new_groupname ) < 2 || size( new_groupname ) > 8 ) )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The groupname must have a size
			// between 2 and 8 characters.
			Report::Error(_("The groupname must be between 2 and 8 characters in length.
Please try again.
")) ;
			UI::SetFocus(`id(`groupname)) ;
			continue;
		    }
		    
		    string firstchar = substring( new_groupname, 0, 1);
		    
		    if ( ( ! (firstchar >= "a" && firstchar <= "z") ||
			   nil != findfirstnotof(  new_groupname, UserDefs::valid_group_chars ) ) )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The groupname may contain only
			// certain characters and must begin with a letter.
			Report::Error(_("The groupname may contain only
lower case letters and digits
and must begin with a letter.
Please try again.
")) ;
			UI::SetFocus(`id(`groupname)) ;
			continue;
		    }
		    
		
		    if ( (((what == `edit_group ) && ( new_groupname != groupname )) || ( what != `edit_group )) &&
			 contains( UserSettings::GroupsRead(`groupnamelist , view_all_groups),  new_groupname ) )
		    {
			// Tell the user that the groupname he entered conflicts with
			// predefined groupnames in the groups file.
			UI(`ErrorPopup(_("There is a conflict between the entered
groupname and a predefined groupname.
Please try another one.
")));
			UI::SetFocus(`id(`groupname)) ;
			continue;
		    }
		    
		    if (  pw1 != pw2 )
		    {
			// There is a check whether the information from the UI is
			// correct and complete.  The two user password information
			// do not match
			Report::Error(_("The first and the second version
of the password are different.
Please try again.")) ;
			password = "x";
			// Invalidate any old password
			
			// clear password inputfields in this case
			UI::ChangeWidget(`id(`pw1), `Value, "");
			UI::ChangeWidget(`id(`pw2), `Value, "");

			UI::SetFocus(`id(`pw1)) ;
			continue;
		    }
		    
		    // Use the old password (if any) if no passwords were entered.
		    // only check pw1 here, its identical with pw2 as checked before
		    if (  ( pw1 != "") &&
			  ( (pw1 != UserDefs::default_pw) && (pw2 != UserDefs::default_pw))  )
		    {
			
			if (size (pw1) <  UserDefs::min_length_pas)
			{
			    // There is a check whether the information from the
			    // UI is correct and complete.  The user password
			    // information must have a minimal size - 5 characters.
			    Report::Error(sformat(_("The password must have between %1 and %2 characters.\nPlease try again."),
						    UserDefs::min_length_pas,
						    UserDefs::max_length_pas));
			    password = "x";

			    // clear password inputfields in this case
			    UI::ChangeWidget(`id(`pw1), `Value, "");
			    UI::ChangeWidget(`id(`pw2), `Value, "");
			    UI::SetFocus(`id(`pw1));
			    continue;
			}
                        if (size(pw1) >  UserDefs::max_length_pas)
                        {
                            if (!UI::YesNoPopup (sformat(_("The password is longer then %1 characters. It will be truncated to %1 characters."),
                                                UserDefs::max_length_pas)))
                            {
                                password = "x";
                                UI::ChangeWidget(`id(`pw1), `Value, "");
                                UI::ChangeWidget(`id(`pw2), `Value, "");
                                UI::SetFocus(`id(`pw1));
                                continue;
                            }
                        }

			if ( pw1 != "" )
			{
			    if ( nil != findfirstnotof( pw1, UserDefs::valid_password_chars ) )
			    {
				// There is a check whether the information from the
				// UI is correct and complete.  The user password may
				// contain only certain characters
				Report::Error(_("The password may only contain the following characters:
0..9, a..z, A..Z, and any of \"#* ,.;:._-+!$%&/|\?{[()]}\".
Please try again."));
				password = "x";
				
				// clear password inputfields in this case
				UI::ChangeWidget(`id(`pw1), `Value, "");
				UI::ChangeWidget(`id(`pw2), `Value, "");
				
				UI::SetFocus(`id(`pw1));
				continue;
			    }	
			}

			if( UserDefs::pam )

			{
			    password  = cryptmd5(pw1);
			}
			else
			{
			    password  = crypt (pw1);
			}
		    }

		    // need for update /etc/gshadow
		    if( pw1 == "" ) password = "*";
		   
		    
		    if ( userlist != new_userlist )
		    {
			// remove last ,
			list new_users = splitstring(new_userlist , "," );
			new_users   = filter(`k, new_users , ``( k != ""));

			//if two entries for one users in new_users delete one
			list tmp_new_users  = new_users;
			list double_entries = [];
			foreach( `new_user, tmp_new_users , ``{
			    if ( (size( filter(`k, tmp_new_users , ``( k == new_user ))) > 1 ) &&
				 ( ! contains( double_entries, new_user) ))
			    {
				double_entries =  add( double_entries ,  new_user );
				new_users = filter(`k, new_users , ``( k != new_user ));
				new_users  = add( new_users , new_user );
				
				
			    }
			});
			new_userlist  = mergestring( new_users ,",");
			
			if( nil == findfirstnotof( new_userlist ,  UserDefs::valid_grouplist_chars ) ) // the same as valid_userlist_chars
			{
			   
			    boolean all_found = true;
			    
			    foreach( `new_user, new_users , ``{

				boolean found = false;
				foreach(`key, `exist_user, UserSettings::current_users, ``{

				    if( lookup( exist_user, "username", "") == new_user )
				    {
					found = true;
				    }
				});
				if ( found == false )
				{
				    if ( new_user != "")
				    {		
					Report::Error(_("You can only assign the group
users that really exists.
Please try again."));
					UI::SetFocus(`id(`userlist));
					all_found = false;
				    }
				}

			
			    
			    });
			    if (!all_found) continue;

			    // delete something
			    if( size( userlist ) > size( new_userlist) )
			    {
				list old_users = splitstring( userlist, "," );
				foreach(`old_user, old_users, ``{
				    
				    if( ! issubstring( new_userlist, old_user ) )
				    {
					// some user was deleted by the user
					if(   issubstring( UserSettings::FindUsersBelongGroup( gid, `string ), old_user ) &&
					      ( !issubstring(lookup( UserSettings::GetGroup( gid ),  "userlist", ""), old_user )))
					{
					    string error_text = sformat(_("You can't delete the user -%1- from this group,
because the user's defaultgroup is this group"), old_user );
					    Report::Error(error_text );
					    UI::ChangeWidget(`id(`userlist), `Value, userlist);
					    UI::SetFocus(`id(`userlist));
					    all_found = false;
					}	
				    }
				});
			    }
			    if (!all_found) continue;
			}
			else
			{
			    Report::Error(_("Syntax in Members of this group is not ok.
Please try again."));
			    UI::SetFocus(`id(`userlist));
			    continue;
			}
		    }
	
		    // check the uid
		    if( new_gid != sformat("%1", gid) )
		    {
			integer new_i_gid = tointeger(new_gid);
			
			if( (!( new_i_gid >= 0  && ( new_i_gid <=  UserDefs::max_gid )) && ( new_i_gid != nil )) ||
			    nil !=  findfirstnotof( new_gid, UserDefs::valid_id_chars ))
			{
			    Report::Error(sformat(_("The selected Group Id is not allowed.
Please select a valid integer between 0 and %1"),  UserDefs::max_gid));
			    UI::SetFocus(`id(`gid));
			    continue;
			}
			
			
			if ( haskey( UserSettings::current_groups , new_i_gid) && ( gid != new_i_gid ))
			{
			    if ( lookup( UserSettings::SetGroup( new_i_gid ), "todo", "") != `delete )
			    {
				Report::Error(_("The inputted Group Id is reserved.
Please select a another Group Id"));
				UI::SetFocus(`id(`gid));
				continue;
			    }
			}

			if ( (what != `add_group ) &&  (new_i_gid  <= UserDefs::max_system_gid ) && ( gid >  UserDefs::max_system_gid ) )
			{
			    Report::Error(_("The inputted Group Id is a system Id.
Please try again."));
			    UI::SetFocus(`id(`gid));
			    continue;
			}

			if ( (what != `add_group ) && (new_i_gid  >  UserDefs::max_system_gid ) && ( gid <=  UserDefs::max_system_gid ) )
			{
			    Report::Error(_("The inputted Group Id is not a system Id.
Please try again."));
			    UI::SetFocus(`id(`gid));
			    continue;
			    
			}
		    }
		    
		    // if savething has changed
		    if ( ((what == `edit_group) && (  (gid          != tointeger(new_gid))  ||
						      (groupname    != new_groupname )      ||
						      (password     != "x"           )      ||
						      (userlist     != new_userlist  )          )) ||
			 (what != `edit_group ) )
		    {

			//save the current group in group_in_work for usersGroupSaveToMap( )
			group_in_work = $[
					  "what"      : what,
					  "groupname" : new_groupname,
					  "password"  : password,
					  "userlist"  : new_userlist,
					  "gid"       : tointeger(new_gid),
					  "old_gid"   : gid
			];
		    }
		    else {
			// nothing has changed - no save
			ret = `back;
		    }
		}
	    } until ( ret == `next ||  ret == `abort  || ret == `back || ret == `cancel );

	return ret;
    }



    
    /**
     * Delete the Group saved in group_in_work from current_groups and
     * add a entry with a shell delete command to the map write_to_system_stack.
     * @return symbol
     */
    global define usersDeleteGroup() ``{

	boolean delete = true;
	integer gid = lookup (group_in_work , "gid", -1 );
	//if no  user in this group
	if ( (size ( filter(`k, `v, UserSettings::current_users , ``(lookup(v,"gid", -1) == lookup(group_in_work , "gid", -1)))) == 0) &&
	     (lookup( group_in_work , "userlist", "") == "" ) )
	{
	    
	    //if the group a system group ask the user ..
	    if ( lookup(group_in_work , "gid", -1 ) <=  UserDefs::max_system_gid )
	    {	
		if(! UI::YesNoHeadlinePopup(_("The marked group is a system group."), _("Do you really want to delete this group")))
		{
		    delete = false;
		}
	    }
	    else
	    {
		if( ! UI::YesNoPopup(sformat(_("
Do you really want to delete the group %1?
"),lookup( group_in_work, "groupname", ""))))
		{
		    delete = false;
		}
	    }

	    if ( ! delete )
	    {
		save_focus( lookup(group_in_work, "gid", 0), `nodelete, `group );
		group_in_work = $[];
		return `next;
	    }

	    
	    UserSettings::DelGroup( group_in_work["gid"]:-1 );
	    
	    //add a shell delete command to write_to_system_stack
	    UserWriteStack::AddTodo(("/usr/sbin/groupdel " + lookup( group_in_work, "groupname", "")),
			 `del_group,
			 sformat(_("Can't delete group %1 "),lookup( group_in_work, "groupname", "")), `group, gid);
	  
	}
	else
	{	
	    UI::WarningPopup(_("You can't delete this group because
there are users in the group.
Delete this users first."));
	    save_focus( lookup(group_in_work, "gid", 0), `nodelete, `group );
	}


	group_in_work = $[];
	return `next;
    }


 
    
} // End
