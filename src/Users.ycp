/**
 * Module:		Users.ycp
 *
 * Authors:		Anas Nashif (nashif@suse.de)
 *
 * Purpose:		Handle users functions
 *
 * $Id$
 */
{

    module "Users";
    textdomain "users";

    import "Console";
    import "Mode";

    import "UserDefs";
    import "UserAddDefs";
    import "UserSettings";
    import "UserWriteStack";

    // Encryption method: "des", "md5" - for future use: "blowfish"
    global string encryptionMethod = "des";

    // The root user
    global string rootPassword = "";

    

    map user_in_work  = $[];

    /**
      * Module constructor
      */
    global define void Users()``{

	UserAddDefs::Read();
	UserDefs::Read();
	UserSettings::ReadSettingsFromDisk(false);
    }



    /**
     * Remove old config options
     * @return void;
     */
    global define void removeOldConf()
	``{
	SCR::Write(.pam.all.password.pam_unix2, "-md5");
	SCR::Write(.pam.all.password.pam_pwcheck, "-md5");
	
	SCR::Write(.pam.login.password.pam_pwcheck, "-md5");
	SCR::Write(.pam.login.password.pam_unix, "-md5");
	SCR::Write(.pam.passwd.password.pam_pwcheck, "-md5");
	SCR::Write(.pam.passwd.password.pam_unix, "-md5");
	SCR::Write(.pam.sshd.password.pam_pwcheck, "-md5");
	SCR::Write(.pam.sshd.password.pam_unix, "-md5");
	SCR::Write(.pam.rlogin.password.pam_pwcheck, "-md5");
	SCR::Write(.pam.rlogin.password.pam_unix, "-md5");

	SCR::Write(.pam.all.password.pam_unix2, "-blowfish");
	SCR::Write(.pam.all.password.pam_pwcheck, "-blowfish");
	
	SCR::Write(.pam.login.password.pam_pwcheck, "-blowfish");
	SCR::Write(.pam.login.password.pam_unix, "-blowfish");
	SCR::Write(.pam.passwd.password.pam_pwcheck, "-blowfish");
	SCR::Write(.pam.passwd.password.pam_unix, "-blowfish");
	SCR::Write(.pam.sshd.password.pam_pwcheck, "-blowfish");
	SCR::Write(.pam.sshd.password.pam_unix, "-blowfish");
	SCR::Write(.pam.rlogin.password.pam_pwcheck, "-blowfish");
	SCR::Write(.pam.rlogin.password.pam_unix, "-blowfish");

    }

    /**
     * Crypt the root password according to method defined in encryptionMethod
     * @param pw1 unencrypted password
     * @return void
     */
    global define void cryptRootPassword(string pw1)
	``{
	if (Mode::test) {
	    return;
	}
	if (encryptionMethod == "md5" )
	{	  
	    SCR::Write( .pam.all.password.pam_unix2,   "+md5" );
	    SCR::Write( .pam.all.password.pam_pwcheck, "+md5" );
	    rootPassword = cryptmd5 (pw1);
	}
	else if (encryptionMethod == "blowfish" )
	{
	    SCR::Write( .pam.all.password.pam_unix2,   "+blowfish" );
	    SCR::Write( .pam.all.password.pam_pwcheck, "+blowfish" );
	    rootPassword = cryptblowfish (pw1);
	}
	else
	{	    
	    rootPassword = crypt (pw1);
	}
	return;
    }

    
    /**
     * Writes password of superuser
     * @return true on success
     */
    global define boolean SetRootPassword()
	``{
	return (SCR::Write(.target.passwd.root, rootPassword));
    }  

    /**
     * Get all the user configuration from a map.
     * When called by users_auto (preparing autoinstallation data)
     * the list can't be  empty.
     * @param settings	A list of users to be added to the system
     * @return	success
     */

    global define boolean Import (list settings) ``{
	foreach(`u , settings, ``{
	    if (u["username"]:"" != "root") {
		string def_home = UserAddDefs::GetDefaultHome() + u["username"]:"lxuser";
		string fullname =  u["forename"]:"forname" + " " + u["surname"]:"surname";

		integer gid = UserDefs::max_gid;
		// check the defaultgroup
		//y2milestone("groups %1", current_groups);

		gid = UserSettings::GetGid( "users" );

		string mod_password = "";
		if (! u["encrypted"]:false) {
	    if (UserDefs::encryption == `md5)
            {
				mod_password = cryptmd5( u["user_password"]:"");
            }
	    else if (UserDefs::encryption == `blowfish)
	    {
				mod_password = cryptblowfish( u["user_password"]:"");
	    }
            else
            {
				mod_password = crypt( u["user_password"]:"");
            }

		} else {
		    mod_password = u["user_password"]:"";
		}
		user_in_work = $[
				 "what"        :  `add_user ,
				 "fullname"    :  u["fullname"]:fullname,
				 "gid"         :  u["gid"]:gid,
				 "home"        :  u["home"]:def_home,
				 "password"    :  mod_password,
				 "shell"       :  u["shell"]:UserAddDefs::GetDefaultShell(),
				 "uid"         :  u["uid"]:UserSettings::NextFreeUid(),
				 "username"    :  u["username"]:"lx_user",
				 "grouplist"   :  u["grouplist"]:"dialout,uucp,video,audio",
				 "forename"    :  u["forename"]:"forname",
				 "surname"     :  u["surname"]:"surname"
		];

		any ret = UserWriteStack::UserSave(user_in_work , false );
	    }
	});
	return true;
    }

    /**
     * Saves users into the system
     * @return true on success
     */
    global define boolean Write ()``{
	any ret = UserWriteStack::SaveDialog(true);
	return true;
    }

}
